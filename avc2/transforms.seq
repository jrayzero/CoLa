from ..cola.frontend.error import *
from ..cola.frontend.block import *
from partition import *

# LIBRARY

class Hadamard:
  # I've just copied these from JM, so may not be the best implementation approach

  def hadamard2x2(inp):
    out = Block(inp)
    Hadamard.hadamard2x2(inp, out)
    return out

  def hadamard2x2(inp,out):
    p0 = inp(0) + inp(1)
    p1 = inp(0) - inp(1)
    p2 = inp(2) + inp(3)
    p3 = inp(2) - inp(3)
    out[0] = p0 + p2
    out[1] = p1 + p3
    out[2] = p0 - p2
    out[3] = p1 - p3

  def ihadamard2x2(inp,out):
    t0 = inp(0) + inp(1)
    t1 = inp(0) - inp(1)
    t2 = inp(2) + inp(3)
    t3 = inp(2) - inp(3)
    out[0] = t0 + t2
    out[1] = t1 + t3
    out[2] = t0 - t2
    out[3] = t1 - t3

  def hadamard4x4(inp):
    out = Block(inp)
    Hadamard.hadamard4x4(inp, out)
    return out

  def hadamard4x4(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # horizontal
    for r in range(4):
      in_row = inp[r,:]
      out_row = out[r,:]
      p0 = in_row(0)
      p1 = in_row(1)
      p2 = in_row(2)
      p3 = in_row(3)
      t0 = p0 + p3
      t1 = p1 + p2
      t2 = p1 - p2
      t3 = p0 - p3
      out_row[0] = t0 + t1
      out_row[1] = t3 + t2
      out_row[2] = t0 - t1
      out_row[3] = t3 - t2
    # vertical
    for c in range(4):
      in_col = out[:,c]
      p0 = in_col(0)
      p1 = in_col(1)
      p2 = in_col(2)
      p3 = in_col(3)
      t0 = p0 + p3
      t1 = p1 + p2
      t2 = p1 - p2
      t3 = p0 - p3
      in_col[0] = (t0 + t1) >> 1
      in_col[1] = (t2 + t3) >> 1
      in_col[2] = (t0 - t1) >> 1
      in_col[3] = (t3 - t2) >> 1

  def ihadamard4x4(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # horizontal
    for r in range(4):
      in_row = inp[r,:]
      out_row = out[r,:]
      t0 = in_row(0)
      t1 = in_row(1)
      t2 = in_row(2)
      t3 = in_row(3)
      p0 = t0 + t2
      p1 = t0 - t2
      p2 = t1 - t3
      p3 = t1 + t3
      out_row[0] = p0 + p3
      out_row[1] = p1 + p2
      out_row[2] = p1 - p2
      out_row[3] = p0 - p3
    # vertical
    for c in range(4):
      in_col = out[:,c]
      t0 = in_col(0)
      t1 = in_col(1)
      t2 = in_col(2)
      t3 = in_col(3)
      p0 = t0 + t2
      p1 = t0 - t2
      p2 = t1 - t3
      p3 = t1 + t3
      in_col[0] = p0 + p3
      in_col[1] = p1 + p2
      in_col[2] = p1 - p2
      in_col[3] = p0 - p3

  def hadamard4x2(inp):
    out = Block(inp)
    Hadamard.hadamard4x2(inp, out)
    return out

  def hadamard4x2(inp, out):
    a0,a1,a2,a3 = inp(0),inp(1),inp(2),inp(3)
    a4,a5,a6,a7 = inp(4),inp(5),inp(6),inp(7)    
    # horizontal
    tmp = (a0+a4,a1+a5,a2+a6,a3+a7,a0-a4,a1-a5,a2-a6,a3-a7)    
    # vertical
    for i in range(0,8,4):
      p0,p1,p2,p3 = tmp[i],tmp[i+1],tmp[i+2],tmp[i+3]      
      t0 = p0 + p3
      t1 = p1 + p2
      t2 = p1 - p2
      t3 = p0 - p3      
      out[i+0] = t0 + t1
      out[i+1] = t3 + t2
      out[i+2] = t0 - t1      
      out[i+3] = t3 - t2

  def ihadamard4x2(inp, out):
    a0,a1,a2,a3 = inp(0),inp(1),inp(2),inp(3)
    a4,a5,a6,a7 = inp(4),inp(5),inp(6),inp(7)    
    # horizontal
    tmp = (a0+a4,a1+a5,a2+a6,a3+a7,a0-a4,a1-a5,a2-a6,a3-a7)    
    # vertical
    for i in range(0,8,4):
      p0,p1,p2,p3 = tmp[i],tmp[i+1],tmp[i+2],tmp[i+3]      
      t0 = p0 + p2
      t1 = p0 - p2
      t2 = p1 - p3
      t3 = p1 + p3
      out[i+0] = t0 + t3
      out[i+1] = t1 + t2
      out[i+2] = t1 - t2
      out[i+3] = t0 - t3
    
class DCT:

  def core_4x4_transform(inp):
    """
    Splits into 4x4 blocks and runs 4x4 transform on each.
    """
    out = Block(inp)
    inp_split,out_split = Partition.grid(inp,4),Partition.grid(out,4)
    for i,o in zip(inp_split,out_split):
      DCT.dct4x4(i,o)
    return out

  def core_4x4_itransform(inp):
    """
    Splits into 4x4 blocks and runs 4x4 inverse transform on each.
    """
    out = Block(inp)
    inp_split,out_split = Partition.grid(inp,4),Partition.grid(out,4)
    for i,o in zip(inp_split,out_split):
      DCT.idct4x4(i,o)
    return out

  def dct4x4(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # horizontal
    out[:,:] = 0
    for r in range(4):
      in_row = inp[r,:]
      out_row = out[r,:]
      p0 = in_row(0)
      p1 = in_row(1)
      p2 = in_row(2)
      p3 = in_row(3)
      t0 = p0 + p3
      t1 = p1 + p2
      t2 = p1 - p2
      t3 = p0 - p3
      out_row[0] = t0 + t1
      out_row[1] = (t3 << 1) + t2
      out_row[2] = t0 - t1
      out_row[3] = t3 - (t2 << 1)
    # vertical
    for c in range(4):
      in_col = out[:,c]
      p0 = in_col(0)
      p1 = in_col(1)
      p2 = in_col(2)
      p3 = in_col(3)
      t0 = p0 + p3
      t1 = p1 + p2
      t2 = p1 - p2
      t3 = p0 - p3
      in_col[0] = t0 + t1
      in_col[1] = t2 + (t3 << 1)
      in_col[2] = t0 - t1
      in_col[3] = t3 - (t2 << 1)

  def idct4x4(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # horizontal
    for r in range(4):
      in_row = inp[r,:]
      out_row = out[r,:]
      t0 = in_row(0)
      t1 = in_row(1)
      t2 = in_row(2)
      t3 = in_row(3)
      p0 = t0 + t2
      p1 = t0 - t2
      p2 = (t1 >> 1) - t3
      p3 = t1 + (t3 >> 1)
      out_row[0] = p0 + p3
      out_row[1] = p1 + p2
      out_row[2] = p1 - p2
      out_row[3] = p0 - p3
    # vertical
    for c in range(4):
      in_col = out[:,c]
      t0 = in_col(0)
      t1 = in_col(1)
      t2 = in_col(2)
      t3 = in_col(3)
      p0 = t0 + t2
      p1 = t0 - t2
      p2 = (t1 >> 1) - t3
      p3 = t1 + (t3 >> 1)
      in_col[0] = p0 + p3
      in_col[1] = p1 + p2
      in_col[2] = p1 - p2
      in_col[3] = p0 - p3

  def core_8x8_transform(inp):
    """
    Splits into 8x8 blocks and runs 8x8 transform on each.
    """
    out = Block(inp)
    inp_split,out_split = Partition.grid(inp,8),Partition.grid(out,8)
    for i,o in zip(inp_split,out_split):
      DCT.dct8x8(i,o)
    return out

  def core_8x8_itransform(inp):
    """
    Splits into 8x8 blocks and runs 8x8 inverse transform on each.
    """
    out = Block(inp)
    inp_split,out_split = Partition.grid(inp,8),Partition.grid(out,8)
    for i,o in zip(inp_split,out_split):
      DCT.idct8x8(i,o)
    return out
 
  def dct8x8(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # horizontal
    for r in range(8):
      in_row = inp[r,:]
      out_row = out[r,:]
      p0 = in_row(0)
      p1 = in_row(1)
      p2 = in_row(2)
      p3 = in_row(3)
      p4 = in_row(4)
      p5 = in_row(5)
      p6 = in_row(6)
      p7 = in_row(7)

      a0 = p0 + p7
      a1 = p1 + p6
      a2 = p2 + p5
      a3 = p3 + p4

      b0 = a0 + a3
      b1 = a1 + a2
      b2 = a0 - a3
      b3 = a1 - a2
      
      a0 = p0 - p7
      a1 = p1 - p6
      a2 = p2 - p5
      a3 = p3 - p4
      
      b4 = a1 + a2 + ((a0 >> 1) + a0)
      b5 = a0 - a3 - ((a2 >> 1) + a2)
      b6 = a0 + a3 - ((a1 >> 1) + a1)
      b7 = a1 - a2 + ((a3 >> 1) + a3)
      
      out_row[0] = b0 + b1 
      out_row[1] = b4 + (b7 >> 2)
      out_row[2] = b2 + (b3 >> 1)
      out_row[3] = b5 + (b6 >> 2)
      out_row[4] = b0 - b1
      out_row[5] = b6 - (b5 >> 2)
      out_row[6] = (b2 >> 1) - b3
      out_row[7] = (b4 >> 2) - b7
      
    #  Vertical 
    for c in range(8):
      in_col = out[:,c]
      p0 = in_col(0)
      p1 = in_col(1) 
      p2 = in_col(2) 
      p3 = in_col(3) 
      p4 = in_col(4) 
      p5 = in_col(5) 
      p6 = in_col(6) 
      p7 = in_col(7) 

      a0 = p0 + p7
      a1 = p1 + p6
      a2 = p2 + p5
      a3 = p3 + p4

      b0 = a0 + a3
      b1 = a1 + a2
      b2 = a0 - a3
      b3 = a1 - a2
      
      a0 = p0 - p7
      a1 = p1 - p6
      a2 = p2 - p5
      a3 = p3 - p4
      
      b4 = a1 + a2 + ((a0 >> 1) + a0)
      b5 = a0 - a3 - ((a2 >> 1) + a2)
      b6 = a0 + a3 - ((a1 >> 1) + a1)
      b7 = a1 - a2 + ((a3 >> 1) + a3)
      
      in_col[0] = b0 + b1      
      in_col[1] = b4 + (b7 >> 2)
      in_col[2] = b2 + (b3 >> 1)
      in_col[3] = b5 + (b6 >> 2)
      in_col[4] = b0 - b1
      in_col[5] = b6 - (b5 >> 2)
      in_col[6] = (b2 >> 1) - b3
      in_col[7] = (b4 >> 2) - b7

  def idct8x8(inp, out):
    if staticlen(inp.dims()) != 2:
      raise ColaError()
    # Horizontal  
    for r in range(8):
      in_row = inp[r,:]
      out_row = out[r,:]
      p0 = in_row(0)
      p1 = in_row(1) 
      p2 = in_row(2) 
      p3 = in_row(3) 
      p4 = in_row(4) 
      p5 = in_row(5) 
      p6 = in_row(6) 
      p7 = in_row(7) 
      
      a0 = p0 + p4
      a1 = p0 - p4
      a2 = p6 - (p2 >> 1)
      a3 = p2 + (p6 >> 1)
      
      b0 = a0 + a3
      b2 = a1 - a2
      b4 = a1 + a2
      b6 = a0 - a3
      
      a0 = -p3 + p5 - p7 - (p7 >> 1)    
      a1 = p1 + p7 - p3 - (p3 >> 1)    
      a2 = -p1 + p7 + p5 + (p5 >> 1)    
      a3 = p3 + p5 + p1 + (p1 >> 1)
           
      b1 = a0 + (a3>>2)    
      b3 = a1 + (a2>>2)    
      b5 = a2 - (a1>>2)
      b7 = a3 - (a0>>2)                
      
      out_row[0] = b0 + b7
      out_row[1] = b2 - b5
      out_row[2] = b4 + b3
      out_row[3] = b6 + b1
      out_row[4] = b6 - b1
      out_row[5] = b4 - b3
      out_row[6] = b2 + b5
      out_row[7] = b0 - b7
      
    #  Vertical 
    for c in range(8):
      in_col = out[:,c]
      p0 = in_col(0)
      p1 = in_col(1)
      p2 = in_col(2)
      p3 = in_col(3)
      p4 = in_col(4)
      p5 = in_col(5)
      p6 = in_col(6)
      p7 = in_col(7)
      
      a0 = p0 + p4
      a1 = p0 - p4
      a2 = p6 - (p2>>1)
      a3 = p2 + (p6>>1)
      
      b0 = a0 + a3
      b2 = a1 - a2
      b4 = a1 + a2
      b6 = a0 - a3
      
      a0 = -p3 + p5 - p7 - (p7 >> 1)
      a1 = p1 + p7 - p3 - (p3 >> 1)
      a2 = -p1 + p7 + p5 + (p5 >> 1)
      a3 = p3 + p5 + p1 + (p1 >> 1)
      
      b1 = a0 + (a3 >> 2)
      b7 = a3 - (a0 >> 2)
      b3 = a1 + (a2 >> 2)
      b5 = a2 - (a1 >> 2)
      
      in_col[0] = b0 + b7
      in_col[1] = b2 - b5
      in_col[2] = b4 + b3
      in_col[3] = b6 + b1
      in_col[4] = b6 - b1
      in_col[5] = b4 - b3
      in_col[6] = b2 + b5
      in_col[7] = b0 - b7

def do_test():
  print 'Running transforms.seq tests'
  blk4x4 = Block.make[int](4,4)
  blk4x4[0] = 58
  blk4x4[1] = 64
  blk4x4[2] = 51
  blk4x4[3] = 58
  blk4x4[4] = 52
  blk4x4[5] = 64
  blk4x4[6] = 56
  blk4x4[7] = 66
  blk4x4[8] = 62
  blk4x4[9] = 63
  blk4x4[10] = 61
  blk4x4[11] = 64
  blk4x4[12] = 59
  blk4x4[13] = 51
  blk4x4[14] = 63
  blk4x4[15] = 69

  @test
  def t0():
    xform = DCT.core_4x4_transform(blk4x4)
    assert xform == [961, -41, 15, -48, -34, 72, -30, -104, -15, 3, 15, 24, 13, 81, -5, 8]
  t0()
  
  blk8x8 = Block.make((8,8), 
                      [58, 64, 51, 58, 52, 64, 56, 66,
                       62, 63, 61, 64, 59, 51, 63, 69,
                       58, 64, 51, 58, 52, 64, 56, 66,
                       62, 63, 61, 64, 59, 51, 63, 69,
                       58, 64, 51, 58, 52, 64, 56, 66,
                       62, 63, 61, 64, 59, 51, 63, 69,
                       58, 64, 51, 58, 52, 64, 56, 66,
                       62, 63, 61, 64, 59, 51, 63, 69,
                      ])
  @test
  def t1():
    xform = DCT.core_8x8_transform(blk8x8)
    assert xform == [3844,-48,124,-104,60,-40,-32,-132,
                     -15,-5,0,18,-12,-13,7,-24,
                     0,0,0,0,0,0,0,0,
                     -20,-7,1,26,-15,-18,10,-32,
                     0,0,0,0,0,0,0,0,
                     -31,-11,2,42,-23,-27,17,-50,
                     0,0,0,0,0,0,0,0,
                     -89,-31,4,116,-66,-78,46,-143]
  t1()
