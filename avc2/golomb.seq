from ..cola.frontend.bits import *
from ..cola.frontend.scan import *
from ..cola.frontend.lut import *
import math

# Library
class MEGolombTables:

  """
  Tables for mapped golomb coding
  """

  ## encoding tables ##

  def encode_table_cat_1_2_intra():
    """
    Table 9-4 standard
    Use when chroma_array_type == 1 or 2
    and block is Intra_4x4 or Intra_8x8
    """
    return LUT((48,), [3, 29, 30, 17, 31, 18, 37, 8, 32, 38, 19, 9, 20, 10, 11, 2, 16, 33, 34, 21, 35, 22, 39, 4, 36, 40, 23, 5, 24, 6, 7, 1, 41, 42, 43, 25, 44, 26, 46, 12, 45, 47, 27, 13, 28, 14, 15, 0])
  
  def encode_table_cat_1_2_inter():
    """
    Use when chroma_array_type == 1 or 2
    and block is inter
    """
    raise ColaError('Not implemented')

  def encode_table_cat_0_3_intra():
    """
    Use when chroma_array_type == 0 or 3
    and block is Intra_4x4 or Intra_8x8
    """
    return LUT((16,), [1,10,11,6,12,7,14,2,13,15,8,3,9,4,5,0])

  def encode_table_cat_0_3_inter():
    """
    Use when chroma_array_type == 0 or 3
    and block is inter
    """
    return LUT((16,), [0,1,2,5,3,6,16,10,4,15,7,11,8,12,13,9])

  ## decoding tables ##

  def decode_table_cat_1_2_intra():
    """
    Table 9-4 standard
    Use when chroma_array_type == 1 or 2
    and block is Intra_4x4 or Intra_8x8
    """
    return LUT((48,), [47,31,15,0,23,27,29,30,7,11,13,14,39,43,45,46,16,3,5,10,12,19,21,26,28,35,37,42,44,1,2,4,8,17,18,20,24,6,9,22,25,32,33,34,36,40,38,41])
  
  def decode_table_cat_1_2_inter():
    """
    Use when chroma_array_type == 1 or 2
    and block is inter
    """
    return LUT((48,), [0,16,1,2,4,8,32,3,5,10,12,15,47,7,11,13,14,6,9,31,35,37,42,44,33,34,36,40,39,43,45,46,17,18,20,24,19,21,26,28,23,27,29,30,22,25,38,41])
  
  def decode_table_cat_0_3_intra():
    """
    Use when chroma_array_type == 0 or 3
    and block is Intra_4x4 or Intra_8x8
    """
    return LUT((16,), [15,0,7,11,13,14,3,5,10,12,1,2,4,8,6,9])

  def decode_table_cat_0_3_inter():
    """
    Use when chroma_array_type == 0 or 3
    and block is inter
    """
    return LUT((16,), [0,1,2,4,8,3,5,10,12,15,7,11,13,14,6,9])

class ExpGolomb:

  def encode_ue[N:int](k: int, codeword: Bits[N]):
    """
    Unsigned direct mapping
    k: value to encode
    codeword: sequence to pack into
    """
    ExpGolomb.encode(k, codeword)
    return codeword

  def decode_ue[N:int](codeword: Bits[N]) -> int:
    """
    Unsigned direct mapping
    """
    return ExpGolomb.decode(codeword)

  def encode_te[N:int](k: int, max_k: int, codeword: Bits[N]):
    """
    Truncated mapping
    k: value to encode
    max_k: max value of ks
    codeword: sequence to pack into
    """ 
    if max_k == 1:
      ExpGolomb.encode(int(not bool(k)))
    else:
      ExpGolomb.encode(k, codeword)
    return codeword

  def decode_te[N:int](max_k: int, codeword: Bits[N]) -> int:
    """
    Truncated mapping
    """
    b = ExpGolomb.decode(codeword)
    if max_k == 1:          
      return int(not bool(b))
    else:
      return b  

  def encode_se[N:int](k: int, codeword: Bits[N]):
    """
    Signed mapping 
    k: value to encode
    codeword: sequence to pack into
    """
    codenum = 2 * abs(k) - int(k>0)
    ExpGolomb.encode(codenum, codeword)
    return codeword

  def decode_se[N:int](codeword: Bits[N]):
    """
    Signed mapping 
    """
    codenum = ExpGolomb.decode(codeword)
    return (-1)**(codenum+1)*int(math.ceil(codenum/2))

  def encode_me[N:int](k: int, codeword: Bits[N], table: LUT[int,Tuple[int]]):
    """
    Mapped symbols
    k: value to encode
    codeword: sequence to pack into
    table: the mappings, returning the codenum
    """
    codenum = table[k]
    ExpGolomb.encode(codenum, codeword)
    return codeword

  def decode_me[N:int](codeword: Bits[N], table: LUT[int,Tuple[int]]):
    """
    Mapped symbols
    table: the mappings, returning k for codenum
    """
    codenum = ExpGolomb.decode(codeword)
    return table[codenum]    
  
  def encode[N:int](codenum: int, codeword: Bits[N]):
    """
    codenum: value to encode
    codeword: sequence to pack into
    """
    M = int(math.floor(math.log2(codenum+1)))
    INFO = codenum+1-2**M
    for _ in range(M):
      codeword.pack(0,1)
    codeword.pack(1,1)
    codeword.pack(INFO,M)

  def decode[N:int](codeword: Bits[N]) -> int:
    """
    Decode the leading bits in codeword and remove them from codeword.
    """
    M = 0
    for bit in scan(codeword):
      if not bit:
        M += 1
      else:
        break
    codeword.unpack(M+1) # remove the leading zeros and 1 delimiter
    INFO = int(codeword.unpack(M))
    return 2**M + INFO - 1

@test
def do_test():
  print 'Running Golomb tests'
  codenum = 107
  codeword = Bits[64]()
  ExpGolomb.encode(codenum, codeword)
  actual = Bits[64]()
  actual.pack(108,13)
  assert codeword == actual
  codenum = ExpGolomb.decode(codeword)
  assert codenum == 107
  codeword.pack(227, 15)
  assert ExpGolomb.decode(codeword) == 226
  
  k = -137
  ExpGolomb.encode_se(k, codeword)
  assert ExpGolomb.decode_se(codeword) == k
