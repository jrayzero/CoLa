from ..cola.frontend.traversal import *

# LIBRARY

def _zigzag(N: int, i: int = 1, upper: bool = True) -> Traversal:
  t = Traversal(2)
  if i > 0 and upper:
    # upper triangle
    t.add_astep((1,-1),2*i-1)
    t.add_astep((1,0))
    t.add_astep((-1,1),2*i)
    t.add_astep((0,1))
    t.add_link(_zigzag(N, i+1, i+1 != N//2))
  elif i > 1:
    # lower triangle
    j = i-1
    t.add_astep((1,-1),2*j+1)
    t.add_astep((0,1))
    t.add_astep((-1,1),2*j)
    t.add_astep((1,0))
    t.add_link(_zigzag(N, j, upper))
  return t
    
def zigzag(N: int):
  zz = _zigzag(N)
  zz.insert_astep(0,(0,1))
  zz.add_astep((1,-1))
  zz.add_astep((0,1))
  return zz

@test
def do_test():
  print 'Running trav.seq tests'
  zz = zigzag(8)
  s = str(zz)
  assert s == "(0, 0) -> (0, 1) -> (1, 0) -> (2, 0) -> (1, 1) -> (0, 2) -> (0, 3) -> (1, 2) -> (2, 1) -> (3, 0) -> (4, 0) -> (3, 1) -> (2, 2) -> (1, 3) -> (0, 4) -> (0, 5) -> (1, 4) -> (2, 3) -> (3, 2) -> (4, 1) -> (5, 0) -> (6, 0) -> (5, 1) -> (4, 2) -> (3, 3) -> (2, 4) -> (1, 5) -> (0, 6) -> (0, 7) -> (1, 6) -> (2, 5) -> (3, 4) -> (4, 3) -> (5, 2) -> (6, 1) -> (7, 0) -> (7, 1) -> (6, 2) -> (5, 3) -> (4, 4) -> (3, 5) -> (2, 6) -> (1, 7) -> (2, 7) -> (3, 6) -> (4, 5) -> (5, 4) -> (6, 3) -> (7, 2) -> (7, 3) -> (6, 4) -> (5, 5) -> (4, 6) -> (3, 7) -> (4, 7) -> (5, 6) -> (6, 5) -> (7, 4) -> (7, 5) -> (6, 6) -> (5, 7) -> (6, 7) -> (7, 6) -> (7, 7)"  
