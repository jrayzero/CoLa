from ..cola.frontend.bits import *
from ..cola.frontend.flagtree import *
from ..cola.frontend.scan import *
from constants import *
from trav import *

class CAVLCTables:
  pass

class CAVLC:

  def nC(ChromaArrayType: int):
    """
    Standard section 9.2.1, for ChromaDCLevel
    """
    if ChromaArrayType == 1:
      return -1
    else:
      return -2

  def available_flag_A[E,T,C](coeffs: View[E,T,C], pred_info, \
                              constrained_intra_pred_flag, nal_unit_type):
    """
    Standard section 9.2.1, compute if left block
    available.
    """
    left = coeffs[0,-1]
    if not left.exists():
      return False
    if pred_info[coeffs] and constrained_intra_pred_flag and not pred_info[left] and 2 <= nal_unit_type <= 4:
      return False
    return True
          
  def available_flag_B[E,T,C](coeffs: View[E,T,C], pred_info, \
                              constrained_intra_pred_flag, nal_unit_type):
    """
    Standard section 9.2.1, compute if upper block
    available.
    """
    upper = coeffs[-1,0]
    if not upper.exists():
      return False
    if pred_info[coeffs] and constrained_intra_pred_flag and not pred_info[upper] and 2 <= nal_unit_type <= 4:
      return False
    return True

  def nA[E,T,C](coeffs: View[E,T,C], mb_type_info, coded_block_pattern: bool, total_coeffs_info):
    left = coeffs[0,-1]
    if mb_type_info[left] == P_SKIP or mb_type_info[left] == B_SKIP:
      return 0
    elif mb_type_info[left] != I_PCM and coded_block_pattern:
      return 0
    elif mb_type_info[left] == I_PCM:
      return 16
    else:
      return total_coeffs_info[left]

  def nB[E,T,C](coeffs: View[E,T,C], mb_type_info, coded_block_pattern: bool, total_coeffs_info):
    upper = coeffs[-1,0]
    if mb_type_info[upper] == P_SKIP or mb_type_info[upper] == B_SKIP:
      return 0
    elif mb_type_info[upper] != I_PCM and coded_block_pattern:
      return 0
    elif mb_type_info[upper] == I_PCM:
      return 16
    else:
      return total_coeffs_info[upper]

  def nC[E,T,C](coeffs: View[E,T,C], available_flag_A, available_flag_B, mb_type_info, coded_block_pattern: bool, total_coeffs_info):
    # total_coeffs_info = flags
    if available_flag_A and available_flag_B:
      nA = CAVLC.nA(coeffs, mb_type_info, coded_block_pattern, total_coeffs_info)
      nB = CAVLC.nB(coeffs, mb_type_info, coded_block_pattern, total_coeffs_info)
      return (nA + nB + 1) >> 1
    elif available_flag_A:
      return CAVLC.nA(coeffs, mb_type_info, coded_block_pattern, total_coeffs_info)
    elif available_flag_B:
      return CAVLC.nB(coeffs, mb_type_info, coded_block_pattern, total_coeffs_info)
    else:
      return 0    

  # TODO figure out this coded_block_pattern (seems to only be for 8x8 blocks)!!
  def encode[E,T,C](coeffs: View[E,T,C], pred_info, mb_type_info, total_coeffs_info, coded_block_pattern: bool, 
                    nal_unit_type: int, constrained_intra_pred_flag: bool):
    """
    Encode one block of quantized coefficients with CAVLC.
    total_coeffs_info stores the number of zeros in each 4x4 block for the leaves. See #6 in 9.2.1. 
    The nA,nB,nC functions will determine how to interpret the numbers in this.
    """
    total_coeffs,trailing_ones,total_zeros,nonzero_coeffs,zero_runs = CAVLC.gather_stats(coeffs)
    ntrailing_ones = len(trailing_ones)
    bits = Bits[64]()
    # figure out nC so we know what VLC table to use
    available_flag_A = CAVLC.available_flag_A(coeffs, pred_info, constrained_intra_pred_flag, nal_unit_type)
    available_flag_B = CAVLC.available_flag_B(coeffs, pred_info, constrained_intra_pred_flag, nal_unit_type)    
    nC = CAVLC.nC(coeffs, available_flag_A, available_flag_B, mb_type_info, coded_block_pattern, total_coeffs_info)
    # encode the various pieces
    CAVLC.encode_coeff_token(nC, ntrailing_ones, total_coeffs, bits)
    CAVLC.encode_trailing_ones(trailing_ones, bits)
    CAVLC.encode_levels(total_coeffs, nonzero_coeffs, ntrailing_ones, bits)
    CAVLC.encode_total_zeros(total_coeffs, total_zeros, coeffs.nunits(), bits)
    CAVLC.encode_runs(total_coeffs, coeffs.nunits(), total_zeros, zero_runs, bits)
    # update flagtree
    total_coeffs_info[coeffs] = total_coeffs
    return bits

  def encode_coeff_token[T:int](nC: int, ntrailing_ones: int, total_coeffs: int, bits: Bits[T]):
    nC_idx = 0
    if 2 <= nC < 4:
      nC_idx = 1
    elif 4 <= nC < 8:
      nC_idx = 2
    elif 8 <= nC:
      nC_idx = 3
    elif nC == -1:
      nC_idx = 4
    elif nC == -2:
      nC_idx = 5
    val,nbits = CAVLCTables.tbl_9_5(ntrailing_ones, total_coeffs, nC_idx)
    assert nbits != -1 # sanity check to make sure don't grab an invalid entry
    bits.pack(val, nbits)
    
  def encode_trailing_ones[T:int](trailing_ones, bits: Bits[T]):
    bits.pack(trailing_ones)

  def encode_levels[T:int](total_coeffs, nzcoeffs, ntrailing_ones, bits: Bits[T]):
    # THIS PAPER IS A GODSEND https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6183127
    # (it has one bug though in determining threshold for suffix length)
    """
    nzcoeffs should NOT include the trailing ones
    """
    i = ntrailing_ones
    suffix_length = 0
    if total_coeffs > 10 and ntrailing_ones < 3:
      suffix_length = 1  
    for coeff in nzcoeffs:
      level_suffix = level_prefix = level_suffix_size = 0
      level_code = 2 * abs(coeff) - (1 if coeff < 0 else 2)
      if i == ntrailing_ones and ntrailing_ones < 3:
        level_code -= 2
      thresh = 7 if suffix_length == 0 else 15*(1 << (suffix_length-1))
      if abs(coeff) > thresh:
        if suffix_length == 0 and abs(coeff) < 16:
          level_prefix = 14
          level_suffix_size = 4
          level_suffix = level_code - level_prefix
        else:
          level_prefix = 15
          if suffix_length == 0:
            level_code -= 15
          level_suffix_size = 12
          level_suffix = level_code - (level_prefix << suffix_length)
      else:
        level_prefix = level_code >> suffix_length
        level_suffix_size = suffix_length
        level_suffix = level_code - (level_prefix << suffix_length)
      if suffix_length == 0:
        suffix_length = 1
      if suffix_length < 6 and (abs(coeff) > (3 << (suffix_length - 1))):
        suffix_length += 1
      # actually encode the stuff
      for _ in range(level_prefix):
        bits.pack(0,1)
      bits.pack(1,1)
      bits.pack(level_suffix, level_suffix_size)
      i += 1    

  def encode_total_zeros[T:int](total_coeffs: int, total_zeros: int, max_num_coeff: int, bits: Bits[T]):
    """
    max_num_coeff represents how big the block is (==4 means 2x2 DC block, ==8 means 2x4 DC block, etc)
    """
    if total_coeffs == max_num_coeff:
      return # don't encode anything here
    tzvlc_idx = total_coeffs
    if max_num_coeff == 4:
      code,nbits = CAVLCTables.tbl_9_9_a(total_zeros, tzvlc_idx-1)
      bits.pack(code, nbits)
    elif max_num_coeff == 8:
      code,nbits = CAVLCTables.tbl_9_9_b(total_zeros, tzvlc_idx-1)
      bits.pack(code, nbits)
    else:
      code,nbits = CAVLCTables.tbl_9_7_and_9_8(total_zeros, tzvlc_idx-1)
      bits.pack(code, nbits)  

  def encode_runs[T:int](total_coeffs: int, max_num_coeff: int, total_zeros: int, zero_runs: list[int], bits: Bits[T]):
    tlvlc_idx = total_coeffs
    zeros_left = 0 if max_num_coeff == total_coeffs else total_zeros
    lz = len(zero_runs)
    for i in range(total_coeffs-1):
      if zeros_left > 0:
        run_before = zero_runs[i]
        code,nbits = CAVLCTables.tbl_9_10(run_before,min(zeros_left-1,6))
        bits.pack(code,nbits)
        zeros_left -= run_before
        assert zeros_left >= 0 # sanity check
  
  def gather_stats[E,T,C](coeffs: View[E,T,C]):
    total_coeffs = 0
    trailing_ones = RBits[3]() # these can have zeros in between them
    trailing_zeros = 0#RBits[16]() # zeros that occur after the last non-zero. Used to compute total zeros
    total_zeros = 0
    nonzero_coeffs = []
    zero_runs = [0]
    # TODO DON'T INCLUDE DC COEFF IF IS 16x16 (then coeff(0) is the DC, which is done separately)
    for _coeff in scan(zigzag(coeffs.dims()[0])(coeffs)):
      coeff = _coeff()               
      if coeff == 1:
        trailing_ones.pack(0)
        total_coeffs += 1
        nonzero_coeffs.append(coeff)
        trailing_zeros = 0#.clear()
        zero_runs.append(0)
      elif coeff == -1:
        trailing_ones.pack(1)
        total_coeffs += 1
        nonzero_coeffs.append(coeff)
        trailing_zeros = 0#.clear()
        zero_runs.append(0)
      elif coeff != 0:
        trailing_ones.clear()
        total_coeffs += 1
        nonzero_coeffs.append(coeff)
        trailing_zeros = 0#.clear()
        zero_runs.append(0)
      else: # == 0
        zero_runs[-1] += 1
        total_zeros += 1
        trailing_zeros += 1#.pack(0)
    trailing_ones.reverse()
    nonzero_coeffs = nonzero_coeffs[:-1*len(trailing_ones)]
    total_zeros = total_zeros - trailing_zeros
    # for the zero runs, we can skip the first and last
    # the last one is just the number of trailing zeros, which we don't care about
    # the first one is the run before the first non-zero, which doesn't get encoded anyway (because you 
    # can figure it out from the other stuff)
    # then reverse it
    zero_runs = zero_runs[1:-1]
    zero_runs.reverse()
    nonzero_coeffs.reverse()
    return total_coeffs,trailing_ones,total_zeros,nonzero_coeffs,zero_runs

@extend
class CAVLCTables:
  # see raw_tables directory for where this comes from 
  def tbl_9_5(*idxs):
    tbl = Block.make((4,17,6), [(1, 1), (3, 2), (15, 4), (3, 6), (1, 2), (1, 1), (5, 6), (11, 6), (15, 6), (0, 6), (7, 6), (15, 7), (7, 8), (7, 6), (11, 6), (4, 6), (4, 6), (14, 7), (7, 9), (7, 7), (8, 6), (8, 6), (3, 6), (7, 9), (7, 10), (7, 8), (15, 7), (12, 6), (2, 6), (6, 9), (7, 11), (4, 8), (11, 7), (16, 6), (0, -1), (7, 10), (15, 13), (7, 9), (9, 7), (20, 6), (0, -1), (7, 11), (11, 13), (15, 11), (8, 7), (24, 6), (0, -1), (7, 12), (8, 13), (11, 11), (15, 8), (28, 6), (0, -1), (7, 13), (15, 14), (15, 12), (11, 8), (32, 6), (0, -1), (0, -1), (11, 14), (11, 12), (15, 9), (36, 6), (0, -1), (0, -1), (15, 15), (8, 12), (11, 9), (40, 6), (0, -1), (0, -1), (11, 15), (15, 13), (8, 9), (44, 6), (0, -1), (0, -1), (15, 16), (11, 13), (13, 10), (48, 6), (0, -1), (0, -1), (11, 16), (7, 13), (9, 10), (52, 6), (0, -1), (0, -1), (7, 16), (9, 14), (5, 10), (56, 6), (0, -1), (0, -1), (4, 16), (7, 14), (1, 10), (60, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 2), (2, 2), (14, 4), (1, 6), (1, 1), (1, 2), (4, 6), (7, 5), (15, 5), (5, 6), (6, 6), (13, 7), (6, 8), (10, 6), (12, 5), (9, 6), (3, 7), (12, 7), (6, 9), (6, 6), (10, 5), (13, 6), (3, 8), (5, 9), (6, 10), (6, 7), (8, 5), (17, 6), (0, -1), (6, 10), (6, 11), (6, 8), (14, 6), (21, 6), (0, -1), (6, 11), (14, 13), (6, 9), (10, 6), (25, 6), (0, -1), (6, 12), (10, 13), (14, 11), (14, 7), (29, 6), (0, -1), (5, 12), (14, 14), (10, 11), (14, 8), (33, 6), (0, -1), (0, -1), (10, 14), (14, 12), (10, 8), (37, 6), (0, -1), (0, -1), (14, 15), (10, 12), (14, 9), (41, 6), (0, -1), (0, -1), (10, 15), (14, 13), (10, 9), (45, 6), (0, -1), (0, -1), (1, 15), (10, 13), (7, 9), (49, 6), (0, -1), (0, -1), (14, 16), (11, 14), (12, 10), (53, 6), (0, -1), (0, -1), (10, 16), (8, 14), (8, 10), (57, 6), (0, -1), (0, -1), (6, 16), (6, 14), (4, 10), (61, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 3), (3, 3), (13, 4), (6, 6), (1, 3), (1, 3), (5, 7), (9, 6), (14, 5), (10, 6), (2, 7), (11, 7), (5, 8), (5, 6), (11, 5), (14, 6), (2, 8), (10, 7), (5, 9), (5, 7), (9, 5), (18, 6), (0, -1), (4, 9), (5, 10), (5, 8), (13, 6), (22, 6), (0, -1), (5, 10), (5, 11), (5, 9), (9, 6), (26, 6), (0, -1), (5, 11), (13, 13), (13, 11), (13, 7), (30, 6), (0, -1), (4, 12), (9, 13), (9, 11), (10, 7), (34, 6), (0, -1), (0, -1), (13, 14), (13, 12), (13, 8), (38, 6), (0, -1), (0, -1), (9, 14), (9, 12), (9, 8), (42, 6), (0, -1), (0, -1), (13, 15), (13, 13), (13, 9), (46, 6), (0, -1), (0, -1), (9, 15), (9, 13), (9, 9), (50, 6), (0, -1), (0, -1), (13, 16), (6, 13), (11, 10), (54, 6), (0, -1), (0, -1), (9, 16), (10, 14), (7, 10), (58, 6), (0, -1), (0, -1), (5, 16), (5, 14), (3, 10), (62, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 5), (5, 4), (12, 4), (11, 6), (5, 6), (1, 5), (3, 6), (4, 4), (11, 4), (15, 6), (0, 7), (1, 6), (4, 7), (6, 5), (10, 4), (19, 6), (0, -1), (9, 7), (4, 8), (8, 6), (9, 4), (23, 6), (0, -1), (8, 7), (4, 9), (4, 6), (8, 4), (27, 6), (0, -1), (4, 10), (4, 10), (4, 7), (13, 5), (31, 6), (0, -1), (4, 11), (4, 11), (4, 9), (12, 6), (35, 6), (0, -1), (0, -1), (12, 13), (12, 11), (12, 7), (39, 6), (0, -1), (0, -1), (12, 14), (8, 11), (12, 8), (43, 6), (0, -1), (0, -1), (8, 14), (12, 12), (8, 8), (47, 6), (0, -1), (0, -1), (12, 15), (12, 13), (12, 9), (51, 6), (0, -1), (0, -1), (8, 15), (8, 13), (10, 10), (55, 6), (0, -1), (0, -1), (12, 16), (1, 13), (6, 10), (59, 6), (0, -1), (0, -1), (8, 16), (4, 14), (2, 10), (63, 6), (0, -1), (0, -1)])
    return tbl(*idxs)

  def tbl_9_7_and_9_8(*idxs):
    tbl = Block.make((16,15), [(1, 1), (7, 3), (5, 4), (3, 5), (5, 4), (1, 6), (1, 6), (1, 6), (1, 6), (1, 5), (0, 4), (0, 4), (0, 3), (0, 2), (0, 1), (3, 3), (6, 3), (7, 3), (7, 3), (4, 4), (1, 5), (1, 5), (1, 4), (0, 6), (0, 5), (1, 4), (1, 4), (1, 3), (1, 2), (1, 1), (2, 3), (5, 3), (6, 3), (5, 4), (3, 4), (7, 3), (5, 3), (1, 5), (1, 4), (1, 3), (1, 3), (1, 2), (1, 1), (1, 1), (0, -1), (3, 4), (4, 3), (5, 3), (4, 4), (7, 3), (6, 3), (4, 3), (3, 3), (3, 2), (3, 2), (2, 3), (1, 1), (1, 2), (0, -1), (0, -1), (2, 4), (3, 3), (4, 4), (6, 3), (6, 3), (5, 3), (3, 3), (3, 2), (2, 2), (2, 2), (1, 1), (1, 3), (0, -1), (0, -1), (0, -1), (3, 5), (5, 4), (3, 4), (5, 3), (5, 3), (4, 3), (3, 2), (2, 2), (1, 3), (1, 2), (3, 3), (0, -1), (0, -1), (0, -1), (0, -1), (2, 5), (4, 4), (4, 3), (4, 3), (4, 3), (3, 3), (2, 3), (2, 3), (1, 2), (1, 4), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 6), (3, 4), (3, 3), (3, 4), (3, 3), (2, 3), (1, 4), (1, 3), (1, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 6), (2, 4), (2, 4), (3, 3), (2, 4), (1, 4), (1, 3), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 7), (3, 5), (3, 5), (2, 4), (1, 5), (1, 3), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 7), (2, 5), (2, 5), (2, 5), (1, 4), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 8), (3, 6), (1, 6), (1, 5), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 8), (2, 6), (1, 5), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (3, 9), (1, 6), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (2, 9), (0, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 9), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1)])
    return tbl(*idxs)

  def tbl_9_9_a(*idxs):
    tbl = Block.make((4,3), [(1, 1), (1, 1), (1, 1), (1, 2), (1, 2), (0, 1), (1, 3), (0, 2), (0, -1), (0, 3), (0, -1), (0, -1)])
    return tbl(*idxs)

  def tbl_9_9_b(*idxs):
    tbl = Block.make((8,7), [(1, 1), (0, 3), (0, 3), (6, 3), (0, 2), (0, 2), (0, 1), (2, 3), (1, 2), (1, 3), (0, 2), (1, 2), (1, 2), (1, 1), (3, 3), (1, 3), (1, 2), (1, 2), (2, 2), (1, 1), (0, -1), (2, 4), (4, 3), (2, 2), (2, 2), (3, 2), (0, -1), (0, -1), (3, 4), (5, 3), (6, 3), (7, 3), (0, -1), (0, -1), (0, -1), (1, 4), (6, 3), (7, 3), (0, -1), (0, -1), (0, -1), (0, -1), (1, 5), (7, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1)])
    return tbl(*idxs)

  def tbl_9_10(*idxs):
    tbl = Block.make((15,7), [(1, 1), (1, 1), (3, 2), (3, 2), (3, 2), (3, 2), (7, 3), (0, 1), (1, 2), (2, 2), (2, 2), (2, 2), (0, 3), (6, 3), (0, -1), (0, 2), (1, 2), (1, 2), (3, 3), (1, 3), (5, 3), (0, -1), (0, -1), (0, 2), (1, 3), (2, 3), (3, 3), (4, 3), (0, -1), (0, -1), (0, -1), (0, 3), (1, 3), (2, 3), (3, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, 3), (5, 3), (2, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (4, 3), (1, 3), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 4), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 5), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 6), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 7), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 8), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 9), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 10), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (0, -1), (1, 11)])
    return tbl(*idxs)

@test
def do_test():
  # using examples from Richardson's book
  mb_skeleton = Block.make[int](16,16)
  pred_info = FlagTree(True, mb_skeleton)
  pred_info.set_cover_unstrict(mb_skeleton[:4,:4], True)
  mb_type_info = FlagTree(I_SLICE, mb_skeleton)
  total_coeffs_info = FlagTree(-1, mb_skeleton)
  total_coeffs_info.set_cover_unstrict(mb_skeleton[:4,:4], -1)

  # COEFF 1
  coeff_1 = mb_skeleton[:4,:4]
  coeff_1[:,:] = [0,3,-1,0,0,-1,1,0,1,0,0,0,0,0,0,0]
  coded_block_1 = CAVLC.encode(coeff_1, pred_info, mb_type_info, total_coeffs_info, False, 0, False)
  assert coded_block_1 == '000010001110010111101101'

  # COEFF 2
  coeff_2 = mb_skeleton[:4,:4]
  coeff_2[:,:] = [-2,4,0,-1,3,0,0,0,-3,0,0,0,0,0,0,0]
  coded_block_2 = CAVLC.encode(coeff_2, pred_info, mb_type_info, total_coeffs_info, False, 0, False)
  assert coded_block_2 == '000000011010001001000010111001100'

  # COEFF 3
  coeff_3 = mb_skeleton[:4,:4]
  coeff_3[:,:] = [0,0,1,0,0,0,0,0,1,0,0,0,-1,0,0,0]
  coded_block_3 = CAVLC.encode(coeff_3, pred_info, mb_type_info, total_coeffs_info, False, 0, False)
  assert coded_block_3 == '0001110001110010'

  # COEFF 4
  coeff_4 = mb_skeleton[:4,4:8]
  coeff_4[:,:] = [-2,4,0,-1,3,0,0,0,-3,0,0,0,0,0,0,0]
  pred_info.set_cover_unstrict(coeff_4, True)
  total_coeffs_info.set_cover_unstrict(coeff_4, -1)
  coded_block_4 = CAVLC.encode(coeff_4, pred_info, mb_type_info, total_coeffs_info, False, 0, False)
  assert coded_block_4 == '000011010001001000010111001100'
