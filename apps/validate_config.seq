from config import *

class BadFlag:
  _hdr: ExcHeader

  def __init__(self, flag_name, flag_val, *opts):
    self._hdr = ('BadFlag', '\'' + flag_name + '\' has value: ' + str(flag_val) + '. Allowed values: ' + ','.join([str(o) for o in opts]), '', '', 0, 0)

  @property
  def message(self):
    return self._hdr.msg

class PathError:
  _hdr: ExcHeader

  def __init__(self, fn):
    self._hdr = ('PathError', 'File \'' + fn + '\' does not exist.', '', '', 0, 0)

  @property
  def message(self):
    return self._hdr.msg

def file_exists(fn):
  res = _C.fopen(fn.c_str(), 'r'.c_str())
  if res:
    _C.fclose(res)
    return True
  else:
    return False

def validate(flag_name, flag_val, *allowed_opts):
  found = False
  for opt in allowed_opts:
    if flag_val == opt:
      found = True
      break
  if not found:
    raise BadFlag(flag_name, flag_val, *allowed_opts)

def do_validate():
  validate('raw_format', input_cs, YUV_CS)
  validate('raw_order', input_order, PLANAR)
  validate('bit_depth', bit_depth, 8)
  validate('profile_idc', profile_idc, 66)
  validate('constraint_set0_flag', constraint_set0_flag, False)
  validate('constraint_set1_flag', constraint_set1_flag, True)
  validate('constraint_set2_flag', constraint_set2_flag, False)
  validate('constraint_set3_flag', constraint_set3_flag, False)
  validate('constraint_set4_flag', constraint_set4_flag, False)
  validate('constraint_set5_flag', constraint_set5_flag, False)
  validate('chroma_format', chroma_format, SAMPLE_MONO, SAMPLE_420, SAMPLE_422, SAMPLE_444)
  validate('frame_is_slice', frame_is_slice, True)
  if not file_exists(raw):
    raise PathError(raw)
