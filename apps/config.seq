# NOTE: the standard doesn't seem to following a consistent naming style, so I stick with snake case
from constants import *
from parser_setup import EncoderCommandLineParser
import sys

parser = EncoderCommandLineParser(sys.argv[1:])

COLA_TOP = parser.parser.select('top', '/Users/jray/ColaProjects/CoLa/')
raw = parser.parser.select('raw_input', '/Users/jray/ColaProjects/CoLa/apps/test_files/planar/foreman.qcif.300.420.yuv')
input_cs = parser.parser.select('input_cs', YUV_CS)
input_order = parser.parser.select('input_order', PLANAR)
h264_out = parser.parser.select('h264_out', '/tmp/foreman.qcif.300.420.h264')
frames = parser.parser.select('frames', 300)
frame_height = parser.parser.select('frame_height', 144)
frame_width = parser.parser.select('frame_width', 176)
bit_depth = parser.parser.select('bit_depth', 8)
QP = parser.parser.select('QP', 28)

# constrained baseline = 66 + True
profile_idc = parser.parser.select('profile_idc', 66)
constraint_set0_flag = parser.parser.select('constraint_set0_flag', False)
constraint_set1_flag = parser.parser.select('constraint_set1_flag', True)
constraint_set2_flag = parser.parser.select('constraint_set2_flag', False)
constraint_set3_flag = parser.parser.select('constraint_set3_flag', False)
constraint_set4_flag = parser.parser.select('constraint_set4_flag', False)
constraint_set5_flag = parser.parser.select('constraint_set5_flag', False)

#level_idc = ?
chroma_format = parser.parser.select('chroma_format', SAMPLE_420)
# 4:2:0 => chroma_format_idc = 1, separate_colour_plane_flag = False
#chroma_format_idc = 1
#separate_colour_plane_flag = False # 0<->False, 1<->True
chroma_array_type = -1
if chroma_format == SAMPLE_MONO or chroma_format == SAMPLE_444_MONO:
  chroma_array_type = 0 
elif chroma_format == SAMPLE_420: 
  chroma_array_type = 1
elif chroma_format == SAMPLE_422:
  chroma_array_type = 2
elif chroma_format == SAMPLE_444:
  chroma_array_type = 3
else:
  assert False
      
#GOP = [I_SLICE]
#decode_order = [0] # how to order the GOP indices when transmitting
#max_DPB_sz = 5
constrained_intra_pred_flag = parser.parser.select('constrained_intra_pred_flag', True) # True = allow only intra

def compute_chroma_frame_dims() -> Tuple[int,int]:
  if chroma_format == SAMPLE_MONO:
    return 0,0
  elif chroma_format == SAMPLE_420:
    return frame_height//2,frame_width//2
  elif chroma_format == SAMPLE_422:
    return frame_height,frame_width//2
  else:
    return frame_height,frame_width
