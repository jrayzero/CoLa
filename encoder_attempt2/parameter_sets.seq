from ..cola.frontend.block import *
from constants import *

@dataclass(init=False)
class SPS:

  profile_idc: int
  constraint_set0_flag: bool
  constraint_set1_flag: bool
  constraint_set2_flag: bool
  constraint_set3_flag: bool
  constraint_set4_flag: bool
  constraint_set5_flag: bool
  level_idc: int
  seq_parameter_set_id: int
  log2_max_frame_num_minus4: int
  pic_order_cnt_type: int
  log2_max_pic_order_cnt_lsb_minus4: int
  max_num_ref_frames: int
  gaps_in_frame_num_value_allowed_flag: bool
  pic_width_in_mbs_minus1: int
  pic_height_in_map_units_minus1: int
  frame_mbs_only_flag: bool
  direct_8x8_inference_flag: bool
  frame_cropping_flag: bool
  vui_parameters_present_flag: bool
  delta_pic_order_always_zero_flag: bool
  chroma_format_idc: int
  separate_colour_plane_flag: bool
  bit_depth_luma_minus8: int
  bit_depth_chroma_minus8: int
  qpprime_y_zero_transform_bypass_flag: bool
  seq_scaling_matrix_present_flag: bool
  seq_scaling_list_present_flag: list[bool]
  mb_adaptive_frame_field_flag: bool
  frame_crop_left_offset: int
  frame_crop_right_offset: int
  frame_crop_top_offset: int
  frame_crop_bottom_offset: int
  offset_for_non_ref_pic: int
  offset_for_top_to_bottom_field: int
  num_ref_frames_in_pic_order_cnt_cycle: int
  offset_for_ref_frame: list[int]

  def __init__(self):
    self.profile_idc = -1
    self.constraint_set0_flag = False
    self.constraint_set1_flag = False
    self.constraint_set2_flag = False
    self.constraint_set3_flag = False
    self.constraint_set4_flag = False
    self.constraint_set5_flag = False
    self.level_idc = -1
    self.seq_parameter_set_id = -1
    self.log2_max_frame_num_minus4 = 0
    self.pic_order_cnt_type = 0
    self.log2_max_pic_order_cnt_lsb_minus4 = 0
    self.max_num_ref_frames = 5
    self.gaps_in_frame_num_value_allowed_flag = False 
    self.pic_width_in_mbs_minus1 = -1
    self.pic_height_in_map_units_minus1 = -1
    self.frame_mbs_only_flag = True
    self.direct_8x8_inference_flag = True
    self.frame_cropping_flag = False 
    self.vui_parameters_present_flag = False
    self.delta_pic_order_always_zero_flag = False 
    self.chroma_format_idc = 1
    self.separate_colour_plane_flag = False
    self.bit_depth_luma_minus8 = 0
    self.bit_depth_chroma_minus8 = 0
    self.qpprime_y_zero_transform_bypass_flag = False 
    self.seq_scaling_matrix_present_flag = False 
    self.seq_scaling_list_present_flag = []
    self.mb_adaptive_frame_field_flag = False
    self.frame_crop_left_offset = -1
    self.frame_crop_right_offset = -1
    self.frame_crop_top_offset = -1
    self.frame_crop_bottom_offset = -1    
    self.offset_for_non_ref_pic = -1
    self.offset_for_top_to_bottom_field = -1
    self.num_ref_frames_in_pic_order_cnt_cycle = -1
    self.offset_for_ref_frame = []
  
@dataclass(init=False)
class PPS:
  
  pic_parameter_set_id: int
  seq_parameter_set_id: int
  entropy_coding_mode_flag: bool
  bottom_field_pic_order_in_frame_present_flag: bool
  num_slice_groups_minus1: int
  slice_group_map_type: int
  num_ref_idx_l0_default_active_minus1: int
  num_ref_idx_l1_default_active_minus1: int
  weighted_pred_flag: bool
  weighted_bipred_idc: int
  pic_init_qp_minus26: int
  pic_init_qs_minus26: int
  chroma_qp_index_offset: int
  deblocking_filter_control_present_flag: bool
  constrained_intra_pred_flag: bool
  redundant_pic_cnt_present_flag: bool
  slice_group_change_rate_minus1: int
  transform_8x8_mode_flag: bool

  def __init__(self):
    self.pic_parameter_set_id = -1
    self.seq_parameter_set_id = -1
    self.entropy_coding_mode_flag = False
    self.bottom_field_pic_order_in_frame_present_flag = False
    self.num_slice_groups_minus1 = 0
    self.slice_group_map_type = -1
    self.num_ref_idx_l0_default_active_minus1 = -1
    self.num_ref_idx_l1_default_active_minus1 = -1
    self.weighted_pred_flag = False
    self.weighted_bipred_idc = 0
    self.pic_init_qp_minus26 = 0
    self.pic_init_qs_minus26 = 0
    self.chroma_qp_index_offset = 0
    self.deblocking_filter_control_present_flag = False
    self.constrained_intra_pred_flag = False
    self.redundant_pic_cnt_present_flag = False
    self.slice_group_change_rate_minus1 = -1
    self.transform_8x8_mode_flag = False

@dataclass(init=False)
class SliceHeader:

  first_mb_in_slice: int
  slice_type: int
  pic_parameter_set_id: int
  frame_num: int
  idr_pic_id: int
  pic_order_cnt_lsb: int
  no_output_of_prior_pics_flag: bool
  long_term_reference_flag: bool
  slice_qp_delta: int
  slice_qs_delta: int
  num_ref_idx_active_override_flag: bool
  num_ref_idx_l0_active_minus1: int
  num_ref_idx_l1_active_minus1: int
  ref_pic_list_reordering_flag: bool
  adaptive_ref_pic_buffering_flag: bool
  colour_plane_id: int
  field_pic_flag: bool
  bottom_field_flag: bool
  delta_pic_order_cnt_bottom: int
  delta_pic_order_cnt: Tuple[int,int]
  redundant_pic_cnt: int
  direct_spatial_mv_pred_flag: bool
  cabac_init_id: int
  sp_for_switch_flag: bool
  disable_deblocking_filter_idc: int
  slice_alpha_c0_offset_div2: int
  slice_beta_offset_div2: int
  slice_group_change_cycle: int

  def __init__(self):
    self.first_mb_in_slice = -1
    self.slice_type = I
    self.pic_parameter_set_id = -1
    self.frame_num = -1
    self.idr_pic_id = -1
    self.pic_order_cnt_lsb = 0
    self.no_output_of_prior_pics_flag = False
    self.long_term_reference_flag = False
    self.slice_qp_delta = 2
    self.slice_qs_delta = 2
    self.num_ref_idx_active_override_flag = False
    self.num_ref_idx_l0_active_minus1 = -1
    self.num_ref_idx_l1_active_minus1 = -1
    self.ref_pic_list_reordering_flag = False
    self.adaptive_ref_pic_buffering_flag = False
    self.colour_plane_id = -1
    self.field_pic_flag = False
    self.bottom_field_flag = False
    self.delta_pic_order_cnt_bottom = -1
    self.delta_pic_order_cnt = (-1,-1)
    self.redundant_pic_cnt = -1
    self.direct_spatial_mv_pred_flag = False
    self.cabac_init_id = -1
    self.sp_for_switch_flag = False 
    self.disable_deblocking_filter_idc = -1
    self.slice_alpha_c0_offset_div2 = -1
    self.slice_beta_offset_div2 = -1
    self.slice_group_change_cycle = -1

@dataclass(init=False)
class Macroblock:#[E,T,C]:
  
  mb_skip_run: int
  mb_type: int
  intra_modes_most_probable: list[bool]
  intra_modes: list[int]
  intra_16x16_mode: int
  intra_chroma_pred_mode: int
  coded_block_pattern: int
  mb_qp_delta: int
  transform_size_8x8_flag: bool
  interpredicted: bool
  A_mode: Optional[int] # if exists, represents the mode of the block to the left
  B_mode: Optional[int] # if exists, represents the mode of the block above
#  coeffs: View[E,T,C]

  def __init__(self):#, coeffs):
    self.mb_skip_run = 0
    self.mb_type = -1
    self.intra_modes_most_probable = []
    self.intra_modes = []
    self.intra_16x16_mode = -1
    self.intra_chroma_pred_mode = 0
    self.coded_block_pattern = 0
    self.mb_qp_delta = -1
    self.transform_size_8x8_flag = False
    self.interpredicted = False
#    self.coeffs = coeffs
