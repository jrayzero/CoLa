from ..cola.frontend.block import Block

class IOYUV:

  def read_frame_planar(Y_frame, U_frame, V_frame, fd, bit_depth):
    yh,yw = Y_frame.dims()
    ch,cw = U_frame.dims()
    assert yh % 16 == 0
    assert yw % 16 == 0
    total_elems = yh * yw
    Y_frame.read(fd, bit_depth//8, total_elems)
    total_elems = ch * cw
    U_frame.read(fd, bit_depth//8, total_elems)
    V_frame.read(fd, bit_depth//8, total_elems)

#  def read_frame_mono(frame_height, frame_width, frame, fd: File, bit_depth=8):
#    """
#    Read one frame worth of 420 YUV planar values (i.e. YYYY...UUUU...VVVV....) as bytes.
#    Does not pad. Assumes bit_depth is multiple of 8.
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(frame)
#    @ARG(fd, FD_INPUT_READ)
#    """
#    # TODO allow padding
#    assert frame_height % 16 == 0
#    assert frame_width % 16 == 0    
#    total_elems = frame_height * frame_width
#    frame.read(fd, bit_depth // 8, total_elems)
#
#  def read_frame_420_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Read one frame worth of 420 YUV planar values (i.e. YYYY...UUUU...VVVV....) as bytes.
#    Does not pad. Assumes bit_depth is multiple of 8.
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_READ)
#    """
#    # TODO allow padding
#    assert frame_height % 16 == 0
#    assert frame_width % 16 == 0    
#    total_elems_Y = frame_height * frame_width
#    Y_frame.read(fd, bit_depth // 8, total_elems_Y)
#    U_frame.read(fd, bit_depth // 8, total_elems_Y // 4)
#    V_frame.read(fd, bit_depth // 8, total_elems_Y // 4)
#
#  def read_frame_422_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Read one frame worth of 420 YUV planar values (i.e. YYYY...UUUU...VVVV....) as bytes.
#    Does not pad. Assumes bit_depth is multiple of 8.
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_READ)
#    """
#    # TODO allow padding
#    assert frame_height % 16 == 0
#    assert frame_width % 16 == 0    
#    total_elems_Y = frame_height * frame_width
#    Y_frame.read(fd, bit_depth // 8, total_elems_Y)
#    U_frame.read(fd, bit_depth // 8, total_elems_Y // 2)
#    V_frame.read(fd, bit_depth // 8, total_elems_Y // 2)
#
#  def read_frame_444_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Read one frame worth of 420 YUV planar values (i.e. YYYY...UUUU...VVVV....) as bytes.
#    Does not pad. Assumes bit_depth is multiple of 8.
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_READ)
#    """
#    # TODO allow padding
#    assert frame_height % 16 == 0
#    assert frame_width % 16 == 0    
#    total_elems_Y = frame_height * frame_width
#    Y_frame.read(fd, bit_depth // 8, total_elems_Y)
#    U_frame.read(fd, bit_depth // 8, total_elems_Y)
#    V_frame.read(fd, bit_depth // 8, total_elems_Y)
#
#  def write_frame_mono(frame_height, frame_width, frame, fd: File, bit_depth=8):
#    """
#    Write one frame worth of monochrome values as bytes.
#    Does not pad. Assumes bit_depth is multiple of 8.
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(frame)
#    @ARG(fd, FD_INPUT_WRITE)
#    """
#    total_elems = frame_height * frame_width
#    frame.write(fd, bit_depth // 8, total_elems)
#
#  def write_frame_420_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Write one frame worth of 420 YUV planar values (i.e. YYYY...UUUU...VVVV....).
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_WRITE)
#    """
#    total_elems_Y = frame_height * frame_width
#    Y_frame.write(fd, bit_depth // 8, total_elems_Y)
#    U_frame.write(fd, bit_depth // 8, total_elems_Y // 4)
#    V_frame.write(fd, bit_depth // 8, total_elems_Y // 4)
#    
#  def write_frame_422_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Write one frame worth of 422 YUV planar values (i.e. YYYY...UUUU...VVVV....).
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_WRITE)
#    """
#    total_elems_Y = frame_height * frame_width
#    Y_frame.write(fd, bit_depth // 8, total_elems_Y)
#    U_frame.write(fd, bit_depth // 8, total_elems_Y // 2)
#    V_frame.write(fd, bit_depth // 8, total_elems_Y // 2)
#    
#  def write_frame_444_planar(frame_height, frame_width, Y_frame, U_frame, V_frame, fd: File, bit_depth=8):
#    """
#    Write one frame worth of 444 YUV planar values (i.e. YYYY...UUUU...VVVV....).
#    @ARG(frame_height)
#    @ARG(frame_width)
#    @ARG(Y_frame)
#    @ARG(U_frame)
#    @ARG(V_frame)
#    @ARG(fd, FD_INPUT_WRITE)
#    """
#    total_elems_Y = frame_height * frame_width
#    Y_frame.write(fd, bit_depth // 8, total_elems_Y)
#    U_frame.write(fd, bit_depth // 8, total_elems_Y)
#    V_frame.write(fd, bit_depth // 8, total_elems_Y)
#    
#def do_test(prefix_path: str):
#  print 'Running basic_io.seq tests'
#  raw_420 = open(prefix_path + 'test_files/planar/foreman.qcif.3.420.yuv', 'rb')
#  raw_422 = open(prefix_path + 'test_files/planar/foreman.qcif.3.422.yuv', 'rb')
#  raw_444 = open(prefix_path + 'test_files/planar/foreman.qcif.3.444.yuv', 'rb')
#  
#  raw_420_out = open('/tmp/foreman.qcif.3.420.yuv', 'wb')
#  raw_422_out = open('/tmp/foreman.qcif.3.422.yuv', 'wb')
#  raw_444_out = open('/tmp/foreman.qcif.3.444.yuv', 'wb')
#
#  Y_frame_420 = Block.make[byte](144, 176)
#  U_frame_420 = Block.make[byte](72, 88)
#  V_frame_420 = Block.make[byte](72, 88)
#  Y_frame_422 = Block.make[byte](144, 176)
#  U_frame_422 = Block.make[byte](144, 88)
#  V_frame_422 = Block.make[byte](144, 88)
#  Y_frame_444 = Block.make[byte](144, 176)
#  U_frame_444 = Block.make[byte](144, 176)
#  V_frame_444 = Block.make[byte](144, 176)
#
#  for f in range(3):
#    YUV.read_frame_420_planar(144, 176, Y_frame_420, U_frame_420, V_frame_420, raw_420)
#    YUV.write_frame_420_planar(144, 176, Y_frame_420, U_frame_420, V_frame_420, raw_420_out)
#    YUV.read_frame_422_planar(144, 176, Y_frame_422, U_frame_422, V_frame_422, raw_422)
#    YUV.write_frame_422_planar(144, 176, Y_frame_422, U_frame_422, V_frame_422, raw_422_out)
#    YUV.read_frame_444_planar(144, 176, Y_frame_444, U_frame_444, V_frame_444, raw_444)
#    YUV.write_frame_444_planar(144, 176, Y_frame_444, U_frame_444, V_frame_444, raw_444_out)
#  
#  raw_420_out.flush()
#  raw_422_out.flush()
#  raw_444_out.flush()
#  raw_420_out.close()
#  raw_422_out.close()
#  raw_444_out.close()  
#
#  # check that the files are equal
#  raw_420 = open(prefix_path + 'test_files/planar/foreman.qcif.3.420.yuv', 'rb')
#  raw_422 = open(prefix_path + 'test_files/planar/foreman.qcif.3.422.yuv', 'rb')
#  raw_444 = open(prefix_path + 'test_files/planar/foreman.qcif.3.444.yuv', 'rb')
#  
#  raw_420_out = open('/tmp/foreman.qcif.3.420.yuv', 'rb')
#  raw_422_out = open('/tmp/foreman.qcif.3.422.yuv', 'rb')
#  raw_444_out = open('/tmp/foreman.qcif.3.444.yuv', 'rb')
#
#  @test
#  def t0():
#    same = True
#    for a,b in zip(raw_420,raw_420_out):
#      if a != b:
#        same = False
#        break
#    assert same
#
#  @test
#  def t1():
#    same = True
#    for a,b in zip(raw_422,raw_422_out):
#      if a != b:
#        same = False
#        break
#    assert same
#
#  @test
#  def t2():
#    same = True
#    for a,b in zip(raw_444,raw_444_out):
#      if a != b:
#        same = False
#        break
#    assert same
#
#  t0()
#  t1()
#  t2()
#  
#      
#
