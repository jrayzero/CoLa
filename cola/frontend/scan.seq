from block import Block,View
from ptree import PTree,AndPTree
from traversal import Traversal,AppliedTraversal

class ScanUtils:

  def _scan[E,T,C](item: View[E,T,C], *items):
    if staticlen(items) == 0:
      return (iter(item.base),)
    else:
      return (iter(item.base),) + ScanUtils._scan(*items)

  def _scan[E,T,C](item: Block[E,T,C], *items):
    if staticlen(items) == 0:
      return (iter(item.base),)
    else:
      return (iter(item.base),) + ScanUtils._scan(*items)

  def _scan[E,T,C](item: PTree[E,T,C], *items):
    if staticlen(items) == 0:
      return (item.do_iter(),)
    else:
      return (item.do_iter(),) + ScanUtils._scan(*items)

  def _scan[E,T,C](item: AndPTree[E,T,C], *items):
    if staticlen(items) == 0:
      return (item.do_iter(),)
    else:
      return (item.do_iter(),) + ScanUtils._scan(*items)

  def _scan[E,T,C](item: AppliedTraversal[E,T,C], *items):
    if staticlen(items) == 0:
      return (item.do_iter(),)
    else:
      return (item.do_iter(),) + ScanUtils._scan(*items)

# TODO having this messes up the type system (for some reason it matches Block to this when you have Block in items, so
# I imagine that 
#  def _scan(item, *items):
#    if staticlen(items) == 0:
#      return (iter(item),)
#    else:
#      return (iter(item),) + ScanUtils._scan(*items)

  def _scan1[E,T,C](item: View[E,T,C]):
    return iter(item.base)

  def _scan1[E,T,C](item: Block[E,T,C]):
    return iter(item.base)

  def _scan1[E,T,C](item: PTree[E,T,C]):
    return item.do_iter()

  def _scan1[E,T,C](item: AndPTree[E,T,C]):
    return item.do_iter()

  def _scan1[E,T,C](item: AppliedTraversal[E,T,C]):
    return item.do_iter()

#  def _scan1(item):
#    return iter(item)

# users should utilize scan for iteration on blocks and views. Multidim just uses __iter__, but users
# shouldn't have to touch that part.
# Using scan makes it easier to identify "interesting" loop use cases in the compiler
def scan(item, *items):
  # have this separate condition so I don't return a tuple for a single item (which happens with _scan)
  if staticlen(items) == 0:
    for i in ScanUtils._scan1(item):
      yield i
  else:
    iters = ScanUtils._scan(item, *items)
    done = False
    while not done:
      for i in iters:
        if i.done():
          done = True
      if not done:
        yield tuple(i.next() for i in iters)
    for i in iters:
      i.destroy()
