import sys

# TODO allow specifying dependencies between arguments. Like, if you specify this you can't also specify that, etc

ARG_INVALID = -1
ARG_INT = 0
ARG_FLOAT = 1
ARG_STR = 2
ARG_BOOL = 3

def str_to_bool(s: str):
  l = s.lower()
  if l == 'false':
    return False
  elif l == 'true':
    return True
  else:
    raise ValueError()

class ArgError:
    _hdr: ExcHeader

    def __init__(self):
        self._hdr = ('ArgError', '', '', '', 0, 0)

    def __init__(self, message: str):
        self._hdr = ('ArgError', message, '', '', 0, 0)

    @property
    def message(self):
        return self._hdr.msg

@dataclass(init=False)
class ParsedArg:
  
  """
  Represent a (valid) argument parsed from the command line.
  """

  int_val: Optional[int]
  float_val: Optional[float]
  str_val: Optional[str]
  bool_val: Optional[bool]

  def _common(self):
    self.int_val = None
    self.float_val = None
    self.str_val = None
    self.bool_val = None

  def __init__(self):
    self._common()

  def __init__(self, val: int):
    self._common()
    self.int_val = val

  def __init__(self, val: float):
    self._common()
    self.float_val = val

  def __init__(self, val: str):
    self._common()
    self.str_val = val

  def __init__(self, val: bool):
    self._common()
    self.bool_val = val

  def to_int(self):
    return ~self.int_val

  def to_float(self):
    return ~self.float_val

  def to_str(self):
    return ~self.str_val

  def to_bool(self):
    return ~self.bool_val

  def __bool__(self):
    return ~self.bool_val

  def __str__(self):
    if self.int_val:
      return str(~self.int_val)
    elif self.float_val:
      return str(~self.float_val)
    elif self.bool_val:
      return str(~self.bool_val)
    else:
      return str(~self.str_val)
              
@dataclass(init=False)
class ArgOpt:

  """
  Represents a possible value for an argument. It can be an int, float, or str,
  and for int/float, an inclusive lower and upper bound can be used instead.
  """

  arg_type: int
  # Only one of these should be filled in (or 2 is possible in the case of using lower and upper).  

  int_val: Optional[int]
  # If use_int_bound = True and either lower or upper is None, that means unbounded
  use_int_bound: bool
  int_val_lower: Optional[int]
  int_val_upper: Optional[int]
  float_val: Optional[float]
  # If use_float_bound = True and either lower or upper is None, that means unbounded
  use_float_bound: bool
  float_val_lower: Optional[float]
  float_val_upper: Optional[float]
  str_val: Optional[str]
  any_str_allowed: bool
  bool_val: Optional[bool]
  both_bools_allowed: bool
  filled: bool

  def __init__(self):
    self.filled = False
    self.use_int_bound = False
    self.use_float_bound = False
    self.both_bools_allowed = False
    self.any_str_allowed = False
    self.arg_type = ARG_INVALID
    self.int_val = None 
    self.int_val_lower = None
    self.int_val_upper = None
    self.float_val = None
    self.float_val_lower = None
    self.float_val_upper = None
    self.str_val = None
    self.bool_val = None

  def __str__(self):
    if self.arg_type == ARG_INT:
      if self.use_int_bound:
        if self.int_val_lower and self.int_val_upper:
          return '[' + str(~self.int_val_lower) + ',' + str(~self.int_val_upper) + ']'
        elif self.int_val_lower:
          return '[' + str(~self.int_val_lower) + ',INF]'
        elif self.int_val_upper:
          return '[INF,' + str(~self.int_val_upper) + ']'
        else:
          # unbounded
          return '[INF,INF]'
      else:
        return str(~self.int_val)
    elif self.arg_type == ARG_FLOAT:
      if self.use_float_bound:
        if self.float_val_lower and self.float_val_upper:
          return '[' + str(~self.float_val_lower) + ',' + str(~self.float_val_upper) + ']'
        elif self.float_val_lower:
          return '[' + str(~self.float_val_lower) + ',INF]'
        elif self.float_val_upper:
          return '[INF,' + str(~self.float_val_upper) + ']'
        else:
          # unbounded
          return '[INF,INF]'
      else:
        return str(~self.float_val)
    elif self.arg_type == ARG_STR:
      if self.any_str_allowed:
        return '[ANY_STR]'
      else:
        return ~self.str_val
    elif self.arg_type == ARG_BOOL:
      if self.both_bools_allowed:
        return '[True,False]'
      else:
        return str(~self.bool_val)
    else:
      return ""

  def set(self, val: int):
    assert not self.filled
    self.int_val = val
    self.arg_type = ARG_INT
    self.filled = True
    return self

  def set(self, val: float):
    assert not self.filled
    self.float_val = val
    self.arg_type = ARG_FLOAT
    self.filled = True
    return self

  def set(self, val: str):
    assert not self.filled
    self.str_val = val
    self.arg_type = ARG_STR
    self.filled = True
    return self

  def set(self, val: bool):
    assert not self.filled
    self.bool_val = val
    self.arg_type = ARG_BOOL
    self.filled = True
    return self

  def set_int_bound(self, lower: Optional[int], upper: Optional[int]):
    assert not self.filled
    self.int_val_lower = lower
    self.int_val_upper = upper
    self.arg_type = ARG_INT
    self.use_int_bound = True
    self.filled = True
    return self

  def set_float_bound(self, lower: Optional[float], upper: Optional[float]):
    assert not self.filled
    self.float_val_lower = lower
    self.float_val_upper = upper
    self.use_float_bound = True
    self.arg_type = ARG_FLOAT
    self.filled = True
    return self

  def set_any_bool(self):
    assert not self.filled
    self.both_bools_allowed = True
    self.arg_type = ARG_BOOL
    self.filled = True
    return self

  def set_any_str(self):
    assert not self.filled
    self.any_str_allowed = True
    self.arg_type = ARG_STR
    self.filled = True
    return self

  def set(val: int):
    return ArgOpt().set(val)

  def set(val: float):
    return ArgOpt().set(val)

  def set(val: str):
    return ArgOpt().set(val)

  def set(val: bool):
    return ArgOpt().set(val)

  def set_int_bound(lower: Optional[int], upper: Optional[int]):
    return ArgOpt().set_int_bound(lower, upper)

  def set_float_bound(lower: Optional[float], upper: Optional[float]):
    return ArgOpt().set_float_bound(lower, upper)

  def set_any_bool():
    return ArgOpt().set_any_bool()

  def set_any_str():
    return ArgOpt().set_any_str()

  def create_options(*opts):
    """
    Some shorthand for creating a bunch of ArgOpts representing non-bound values (i.e. straight ints, floats, strs, or bools)
    """
    return tuple(ArgOpt.set(opt) for opt in opts)

  # see if this option covers this input, and it so, return the ParsedArg (it returns as a ParsedArg regardless, so check the bool)
  def try_opt(self, arg: str) -> Tuple[bool,ParsedArg]:
    if self.arg_type == ARG_INT:
      try:
        i = int(arg)
        if self.use_int_bound:
          if self.int_val_lower and self.int_val_upper:
            return (i >= ~self.int_val_lower and i <= ~self.int_val_upper,ParsedArg(i))
          elif self.int_val_lower:
            return (i >= ~self.int_val_lower,ParsedArg(i))
          elif self.int_val_upper:
            return (i <= ~self.int_val_upper,ParsedArg(i))
          else:
            # unbounded
            return (True,ParsedArg(i))
        else:
          return (i == self.int_val,ParsedArg(i))
      except ValueError:
        return (False, ParsedArg())
    elif self.arg_type == ARG_FLOAT:
      try:
        f = float(arg)
        if self.use_float_bound:
          if self.float_val_lower and self.float_val_upper:
            return (f >= ~self.float_val_lower and f <= ~self.float_val_upper, ParsedArg(f))
          elif self.float_val_lower:
            return (f >= ~self.float_val_lower, ParsedArg(f))
          elif self.float_val_upper:
            return (f <= ~self.float_val_upper, ParsedArg(f))
          else:
            # unbounded
            return (True,ParsedArg(f))
        else:
          return (f == ~self.float_val,ParsedArg(f))
      except ValueError:
        return (False,ParsedArg())
    elif self.arg_type == ARG_STR:
      if self.any_str_allowed:
        return (True, ParsedArg(arg))
      else:
        return (~self.str_val == arg, ParsedArg(arg))
    elif self.arg_type == ARG_BOOL:
      try:
        b = str_to_bool(arg)
        if self.both_bools_allowed:
          return (True, ParsedArg(b))
        else:
          return (~self.bool_val == b, ParsedArg(b))
      except ValueError:
        return (False,ParsedArg())
    else:
      # arg is invalid
      return (False,ParsedArg())
     
@dataclass(init=False)
class ArgParse:

  """
  Utility for parsing command-line arguments. All arguments should be formatted as '-X' where 'X' can be a single character
  or a bunch of characters.
  """
  
  """
  Name of the arg and its possible values
  """
  arg_opts: Dict[str, list[ArgOpt]]

  """
  Debug info for each arg (such as what it does)
  """
  arg_debug: Dict[str, str]

  """
  Default values to use if no values specified. Not checked for validity in terms of 
  range used.
  """
  arg_defaults: Dict[str, ParsedArg]
  
  """
  The args parsed from the command line.  
  """
  parsed: Dict[str, ParsedArg]

  def __init__(self):
    self.arg_opts = {}
    self.arg_debug = {}
    self.parsed = {}
    self.arg_defaults = {}

  def register[T](self, name, opt: ArgOpt, default_val: T, debug_info: str = ''):
    if name not in self.arg_opts:
      self.arg_opts[name] = []
    self.arg_opts[name].append(opt)
    if name not in self.arg_debug:
      self.arg_debug[name] = debug_info
    else:
      if debug_info != '':
        self.arg_debug[name] = debug_info
    self.arg_defaults[name] = ParsedArg(default_val)

  def register[T](self, name, opts, default_val: T, debug_info: str = ''):
    for opt in opts:
      if name not in self.arg_opts:
        self.arg_opts[name] = []
      self.arg_opts[name].append(opt)
      if name not in self.arg_debug:
        self.arg_debug[name] = debug_info
      else:
        if debug_info != '':
          self.arg_debug[name] = debug_info
      self.arg_defaults[name] = ParsedArg(default_val)

  def register(self, name, opt: ArgOpt, debug_info: str = ''):
    if name not in self.arg_opts:
      self.arg_opts[name] = []
    self.arg_opts[name].append(opt)
    if name not in self.arg_debug:
      self.arg_debug[name] = debug_info
    else:
      if debug_info != '':
        self.arg_debug[name] = debug_info

  def register(self, name, opts, debug_info: str = ''):
    for opt in opts:
      if name not in self.arg_opts:
        self.arg_opts[name] = []
      self.arg_opts[name].append(opt)
      if name not in self.arg_debug:
        self.arg_debug[name] = debug_info
      else:
        if debug_info != '':
          self.arg_debug[name] = debug_info

  def parse(self, args):
    """
    If an arg can be boolean and it doesn't have a value associated with it,
    it is given a value of True
    """
    idx = 0
    while True:
      if idx == len(args):
        break
      arg = args[idx]
      # get the arg name
      front = arg[0]
      if front != '-':
        raise ArgError('Arg must begin with \'-\' (' + arg + ')')
      arg_name = arg[1:]
      if arg_name not in self.arg_opts:
        raise ArgError('Argument not found (' + arg_name + ')')
      if arg_name in self.parsed:
        raise ArgError('Already have value for arg ' + arg_name)
      opts = self.arg_opts[arg_name] 
      # check if there is a next value if we are at the end of the arguments.
      value = ''
      if idx + 1 == len(args):        
        # check if this arg can be a boolean. If so, it doesn't need a value (defaults to True)
        is_bool = False
        for opt in opts:
          if opt.bool_val or opt.both_bools_allowed:
            value = 'True'
            is_bool = True
            break
        if not is_bool:
          raise ArgError(arg_name + ' has no value specified! Possible values: ' + ','.join([str(o) for o in opts]))
      else:
        # There is (possibly) a value. If the current arg is allowed to be a boolean, it doesn't necessarily need a value
        # meaning the next things is actually another argument, not a value.
        is_bool = False
        for opt in opts:
          if opt.bool_val or opt.both_bools_allowed:
            is_bool = True
            break  
        # first, parse as if it were a value
        idx = idx + 1
        value = args[idx]
        if is_bool:
          # see if the next thing is a True or False, making it a bool value
          try:
            b = str_to_bool(value)
          except ValueError:
            # okay, the next thing was another arg, stick it back
            idx = idx - 1
            value = 'True' # default for boolean args without values
      # figure out if this matches any of the options. Take the first match (or fail if no match)
      found_match = False
      for opt in opts:
        is_match,parsed_arg = opt.try_opt(value)
        if is_match:
          found_match = True
          self.parsed[arg_name] = parsed_arg
          break
      idx = idx + 1
      if not found_match:
        raise ArgError('Possible values: ' + ','.join([str(o) for o in opts]) + '. Value ' + str(value) + ' was given.')

  def usage(self) -> str:
    s = 'USAGE\n'
    for _opt,_debug in zip(self.arg_opts, self.arg_debug):      
      s += '-' + _opt + ': ' + self.arg_debug[_debug] + '. Possible values: ' + ','.join([str(o) for o in self.arg_opts[_opt]]) + '\n'
    return s

  def __str__(self) -> str:
    return self.usage()
        
  def __getitem__(self, arg_name: str):
    if arg_name in self.parsed:
      return self.parsed[arg_name]
    elif arg_name in self.arg_defaults:
      return self.arg_defaults[arg_name]
    else:
      raise ArgError('Cannot find parsed arg ' + arg_name)

  def select(self, name, val):
    """
    Return val if no arg is specified in self.parsed_args. Otherwise
    return the value in self.parsed_args
    """
    if name in self.parsed:
      if isinstance(val, int):
        return self.parsed[name].to_int()
      elif isinstance(val, float):
        return self.parsed[name].to_float()        
      elif isinstance(val, str):
        return self.parsed[name].to_str()      
      else:
        return self.parsed[name].to_bool()        
    else:
      return val

def debug():
  parser = ArgParse()
  opt0 = ArgOpt()
  opt1 = ArgOpt()
  opt2 = ArgOpt()
  opt3 = ArgOpt()
  
  parser.register('myarg0', opt0.set(11))
  parser.register('myarg0', opt1.set(93))
  parser.register('myarg1', opt2.set_float_bound(45.0,90.0))
  parser.register('myarg2', opt3.set_any_bool())
  print(parser.usage())

  args = ['-myarg1', '49.3', '-myarg0', '93', '-myarg2', 'False']
  parser.parse(args)
  print(parser['myarg1'].to_float())
  print(parser['myarg2'].to_bool())

