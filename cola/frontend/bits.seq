import internal.gc as gc
from error import ColaError

class RBits[N:int]:
  """
  A special bit sequence that shifts in bits. when full (nbits == N), 
  it drops off the MSB bits rather than packing them,
  """
  # TODO limited to packing single bit right now

  l0_buffer: UInt[N]
  l0_sz: int

  def __init__(self):
    self.l0_sz = 0
    self.l0_buffer = UInt[N](0)

  def pack(self, bit: int):
    self.pack(bool(bit))
    
  def pack(self, bit: bool):
    bit2 = int(bit)
    if self.l0_sz == N:
      self.l0_buffer <<= UInt[N](1)
      self.l0_buffer |= UInt[N](bit2)
    else:
      bit2 <<= (N-self.l0_sz-1)
      self.l0_buffer |= UInt[N](bit2)
      self.l0_sz += 1

  def clear(self):
    self.l0_sz = 0
    self.l0_buffer = UInt[N](0)

  def __len__(self):
    return self.l0_sz

  def reverse(self):
    # super naive reversal
    new_l0 = UInt[N](0)
    seq = self.l0_buffer >> UInt[N](N-self.l0_sz)
    for i in range(self.l0_sz):
      b = seq & UInt[N](1)
      seq >>= UInt[N](1)
      new_l0 |= (b << UInt[N](N-i-1))    
    self.l0_buffer = new_l0

  def do_iter(self):
    for i in range(len(self)):
      yield (self.l0_buffer >> UInt[N](N-i-1)) & UInt[N](1)

  def __str__(self):
    s = 'nbits ' + str(len(self)) + '\n'
    for b in self.do_iter():
      s += str(int(b))
    return s

  def __eq__(self, other: UInt[N]):
    bits = self.l0_buffer >> UInt[N](N-len(self))
    return bits == other

  def __ne__(self, other: UInt[N]):
    return not (self == other)
      
class Bits[N: int]:  
  l1_buffer: Ptr[byte]
  l1_start_capacity: int
  l1_sz: int
  l1_max_cap: int
  l0_buffer: UInt[N]
  l0_sz: int
  fd: Optional[File] # if you have a file, you don't resize l
  offset: int
  
  def __init__(self, l1_start_capacity = 64, l1_max_capacity = 64):
    self.l0_buffer = UInt[N](0)
    self.l0_sz = 0
    self.l1_buffer = Ptr[byte](l1_start_capacity)
    self.l1_start_capacity = l1_start_capacity
    self.l1_max_cap = l1_max_capacity
    self.l1_sz = 0
    self.offset = 0

  def __init__(self, fd: File, l1_start_capacity = 64, l1_max_capacity = 64):
    self.l0_buffer = UInt[N](0)
    self.l0_sz = 0
    self.l1_buffer = Ptr[byte](l1_start_capacity)
    self.l1_max_cap = l1_max_capacity
    self.l1_sz = 0
    self.fd = fd
    self.offset = 0

  def clear(self):
    self.__init__(self.l1_start_capacity, self.l1_max_cap)

  def reset_offset(self):
    self.offset = 0

  # TODO this is a nice thought, but the tricky part is that we may
  # need to remove data from l1 and pack it back into l0 since l1
  # only gets full bytes at one time
#  def lsb_unpack(self, nbits):
    # unpack from the LSB. 
#    pass
#    assert nbits <= len(self)
#    new_len = len(self) - nbits
#    # remove from l0. just need to mask off
#    l0_bits_to_remove = min(nbits, self.l0_sz)
#    # bits after we remove
#    l0_bits_left = self.l0_sz - l0_bits_to_remove 
#    for i in range(l0_bits_to_remove):
#      mask = 1      
#      shift_amt = N - l0_bits_left - i - 1
#      mask = ~(mask << shift_amt)      
#      self.l0_buffer&= UInt[N](mask)        
#    self.l0_sz = l0_bits_left
#    # remove from l1
#    nbits -= l0_bits_to_remove
#    l1_bits_to_remove = min(nbits, self.l1_sz)
#    l1_bits_left = self.l1_sz - l1_bits_to_remove
    
    

  def _pack[T: int](self, val: UInt[T], nbits: int):
    if T < nbits:
      raise ColaError()
    nbits_to_pack = nbits
    # MSB align and zero out MSB bits not needed
    bitseq = val << UInt[T](T - nbits)#val >> UInt[T](T-nbits)    
    # see how many bits are left in l0
    while nbits_to_pack > 0:
      l0_bits_free = N - self.l0_sz
      # see if we need all of the free bits
      bits_needed = min(nbits_to_pack, l0_bits_free)
      mask = ~((UInt[T](1) << UInt[T](T-bits_needed)) - UInt[T](1))
      masked_bits = bitseq & mask
      # now shift back to be LSB aligned
      masked_bits >>= UInt[T](T - bits_needed)
      # and convert to UInt[N]
      N_masked_bits = UInt[N](masked_bits)
      # align to appropriate MSB side in l0_buffer
      N_masked_bits <<= UInt[N](l0_bits_free-bits_needed)
      # now shift them to be appended onto l0
      self.l0_buffer |= UInt[N](N_masked_bits)
      # align to MSB
      bitseq <<= UInt[T](bits_needed)
      nbits_to_pack -= bits_needed
      self.l0_sz += bits_needed
      # flush to l1_buffer if needed
      self._put_if(N//2)

  def pack(self, val: int, nbits):
    self._pack(UInt[64](val), nbits)
    return self

  def pack[T: int](self, val: Int[T], nbits):
    self._pack(UInt[T](val), nbits)
    return self

  def pack[T: int](self, val: UInt[T], nbits):
    self._pack(val, nbits)
    return self

  def pack(self, val: byte, nbits):
    self._pack(u8(val), nbits)
    return self

  def pack(self, val: bool):
    self._pack(u8(val), 1)
    return self

  def pack[T:int](self, val: RBits[T]):
    for v in val.do_iter():
      self.pack(v)
    return self

  def pack[T:int](self, val: Bits[T]):
    for v in val.do_iter():
      self.pack(v)
    return self

  # see if we need to move bits from l0_buffer to l1_buffer
  def _put_if(self, bound: int = N//2):
    # need to flush to no more than 32 bits
    while self.l0_sz > bound:
      # we move 1 byte at a time from MSB to LSB
      bt = (self.l0_buffer >> UInt[N](N-8)) & UInt[N](0xFF)
      self.l1_buffer[self.l1_sz] = byte(bt)
      self.l1_sz += 1      
      self.l0_buffer <<= UInt[N](8) # get rid of the byte we just did
      self.l0_sz -= 8
      self.flush_file_or_resize_l1()

  # TODO NEED TO MAKE THESE CLEARER. WHEN DO YOU FLUSH TO FILE? WHEN DO YOU SPECIFY A DIFFERENT FILE?
  # WHEN DO YOU JUST FLUSH FROM L0 to L1

  # see if we need to flush our output buffer to file (or resize)
  def flush_file_or_resize_l1(self):
    if self.l1_sz == self.l1_max_cap:
      if self.fd:
        fd = self.fd
        # write to file
        assert _C.fwrite(self.l1_buffer, 1, self.l1_sz, fd.fp) == self.l1_sz
        self.l1_sz = 0
        self.fd.flush()
      else:
        # resize
        self.l1_max_cap = self.l1_max_cap * 2
        self.l1_buffer = self.l1_buffer.resize(self.l1_max_cap)

  # force l0_buffer to be put to l1_buffer, even if not completely full
  # you can only flush if l0 is a multiple of byts. The user is responsible for padding that out  
  def flush_l0_to_l1(self, reset_l1: bool = True) -> bool:
    self._put_if(0)
    return True

  def _flush_to_file(self, reset_l1: bool = True, force: bool = False) -> bool: 
    if self.flush_l0_to_l1() or force:
      if self.fd:
        assert  _C.fwrite(self.l1_buffer, 1, self.l1_sz, self.fd.fp) == self.l1_sz
        if reset_l1:
          self.l1_sz = 0
        self.fd.flush()
        return True
    return False    

  def bits_left(self, at_least: int = 0) -> bool:
    return (len(self) - self.offset) >= at_least

  # dumps the current state of the l0 and l1 buffers. just prints in decimal for now cause
  # I'm lazy
  def __str__(self):
    s = 'nbits (factoring in offset) : ' + str(len(self)) + '\n'
    for b in self.do_iter():
      s += str(int(b))
    return s

  def do_iter(self):
    # doesn't modify the iterator
    l = len(self)
    local_offset = 0
    for i in range(l):
      mx = 1 #self.offset + 1
      if mx > len(self):
        raise ColaError()      
      idx = self.offset + local_offset
      if idx < self.l1_sz * 8:
        which_byte = idx // 8
        the_byte = u8(self.l1_buffer[which_byte])
        which_bit = idx & 7
        the_byte >>= u8((8 - which_bit - 1))
        the_bit = UInt[64](the_byte & u8(1))
        yield bool(the_bit)
      else:
        # in l0
        # determine offset in l0
        idx -= self.l1_sz * 8
        the_bit = UInt[64]((self.l0_buffer >> UInt[N](N - idx - 1)) & UInt[N](1))
        yield bool(the_bit)
      local_offset += 1

  # only supports up to 64 bits at a time (cause I can't seem to add a generic to __call__)
  def __call__(self, nbits: int) -> UInt[64]:  
    local_offset = 0
    mx = nbits #self.offset + nbits
    if nbits > 64 and nbits < 0:
      raise ColaError()
    if mx > len(self):
      raise ColaError()
    ret = UInt[64](0)
    # naively read bit by bit
    for i in range(nbits):
      idx = self.offset + local_offset
      if idx < self.l1_sz * 8:
        which_byte = idx // 8
        the_byte = u8(self.l1_buffer[which_byte])
        which_bit = idx & 7
        the_byte >>= u8((8 - which_bit - 1))
        the_bit = UInt[64](the_byte & u8(1))
        the_bit <<= UInt[64](64 - i - 1)
        ret |= the_bit
      else:
        # in l0
        # determine offset in l0
        idx -= self.l1_sz * 8
        the_bit = UInt[64]((self.l0_buffer >> UInt[N](N - idx - 1)) & UInt[N](1))
        the_bit <<= UInt[64](64 - i - 1)
        ret |= the_bit        
      local_offset += 1
    # LSB align
    return ret >> u64(64 - nbits)

  def destructive_call(self, nbits: int) -> UInt[64]:  
    local_offset = 0
    mx = nbits #self.offset + nbits
    if nbits > 64 and nbits < 0:
      raise ColaError()
    if mx > len(self):
      raise ColaError()
    ret = UInt[64](0)
    # naively read bit by bit
    for i in range(nbits):
      idx = self.offset + local_offset
      if idx < self.l1_sz * 8:
        which_byte = idx // 8
        the_byte = u8(self.l1_buffer[which_byte])
        which_bit = idx & 7
        the_byte >>= u8((8 - which_bit - 1))
        the_bit = UInt[64](the_byte & u8(1))
        the_bit <<= UInt[64](64 - i - 1)
        ret |= the_bit
      else:
        # in l0
        # determine offset in l0
        idx -= self.l1_sz * 8
        the_bit = UInt[64]((self.l0_buffer >> UInt[N](N - idx - 1)) & UInt[N](1))
        the_bit <<= UInt[64](64 - i - 1)
        ret |= the_bit        
      local_offset += 1
    # LSB align
    self.offset += local_offset
    return ret >> u64(64 - nbits)

  # TODO currently, this just changes the offset, rather than actually removing bits
  # figure out how to remove bits eventually
  def unpack(self, nbits: int) -> UInt[64]:
    val = self.__call__(nbits)
    self.offset += nbits
    return val

  def __getitem__(self, idx: int):
    return self[slice(idx,idx+1,1)]

  def __getitem__(self, idx: slice):
    start = ~idx.start if idx.start is not None else 0
    stop = ~idx.stop if idx.stop is not None else len(self)
    if start < 0:
      start = len(self) + start
    if stop < 0:
      stop = len(self) + stop
    assert start >= 0
    assert stop >= 0
    assert start <= stop
    # really naive looping method to get the appropriate elements, 
    idx2 = 0
    new_bits = Bits[N]()
    for b in self.do_iter():
      if start <= idx2 < stop:
        new_bits.pack(b)
      elif idx2 > stop:
        break
      idx2 += 1
    return new_bits


  def __setitem__[T:int](self, idx: slice, val: Bits[T]):
    start = ~idx.start if idx.start is not None else 0
    stop = ~idx.stop if idx.stop is not None else len(self)
    if start < 0:
      start = len(self) + start
    if stop < 0:
      stop = len(self) + stop
    assert start >= 0
    assert stop >= 0
    assert start <= stop
    # doesn't modify the iterator
    l = len(self)
    local_offset = 0
    for i in range(l):
      if i < start or i >= stop:
        local_offset += 1
        continue      
      mx = 1 
      if mx > len(self):
        raise ColaError()      
      idx2 = self.offset + local_offset
      bit_to_write = val.destructive_call(1)
      if idx2 < self.l1_sz * 8:
        which_byte = idx2 // 8
        the_byte = u8(self.l1_buffer[which_byte])
        which_bit = idx2 & 7
        clear_mask = ~(1 << (8 - which_bit - 1))
        the_byte &= u8(clear_mask)
        placed_bit = UInt[8](bit_to_write) << UInt[8](8 - which_bit - 1)
        the_byte |= placed_bit
        self.l1_buffer[which_byte] = byte(the_byte)
      else:
        # in l0
        # determine offset in l0
        idx2 -= self.l1_sz * 8
        # first, clear where we want our bit
        clear_mask = ~(1 << (N - idx2 - 1))
        self.l0_buffer &= UInt[N](clear_mask)
        # now get the bit in the right location
        placed_bit = UInt[N](bit_to_write) << UInt[N](N - idx2 - 1)
        self.l0_buffer |= UInt[N](placed_bit)
      local_offset += 1

  def __setitem__(self, idx: slice, other: int):
    bits = Bits[N]()
    start = ~idx.start if idx.start is not None else 0
    stop = ~idx.stop if idx.stop is not None else len(self)    
    if start < 0:
      start = len(self) + start
    if stop < 0:
      stop = len(self) + stop
    assert start >= 0
    assert stop >= 0
    assert start <= stop
    nbits = stop - start
    bits.pack(other, nbits)
    self.__setitem__(idx, bits)
  
  def rewind(self, move_back: int):
    if self.offset < move_back:
      raise ColaError()
    self.offset -= move_back    

  def __len__(self):
    return self.l0_sz + self.l1_sz * 8 - self.offset

  def flush_to_file(self, flush_to: Optional[File] = None, reset_l1: bool = False, force: bool = False) -> bool:
    # just flush whatever is in l0 and l1 to file
    if flush_to:
      tmp = self.fd
      self.fd = flush_to
      b = self._flush_to_file(reset_l1, force)
      self.fd = tmp
      return b
    else:
      b = self._flush_to_file(reset_l1, force)      
      return b

  def __eq__[S:int](self, other: Bits[S]):
    if len(self) != len(other):
      return False
    for a,b in zip(self.do_iter(), other.do_iter()):
      if a != b:
        return False
    return True

  def __eq__(self, other: str):
    """
    other: str of 0s and 1s
    """
    if len(self) != len(other):
      return False
    for a,b in zip(self.do_iter(), other):
      if b != '0' and b != '1':
        raise ColaError()
      bb = b != '0'
      if a != bb:
        return False
    return True

  # oh god this is terrible
  # THIS WILL TRUNCATE OTHER TO LEN(SELF) BITS
  def __eq__(self, other: int):
    # int can be 64 bits max
    if len(self) > 64:
      return False
    new_bits = Bits[64]() 
    new_bits.pack(other, len(self))
    final_idx = 0
    for a,b in zip(self.do_iter(), new_bits.do_iter()):
      if a != b:
        return False
      final_idx += 1
    # check for any remaining 1 bits in new_bits (to make sure we didn't truncate
    # if self is < 64 bits)
#    for i,a in enumerate(new_bits.do_iter()):
#      if i >= final_idx:
#        if a:
#          return False
    return True

  def __ne__(self, other):
    return not (self == other)
 
@extend
class UInt[N: int]:

  def __new__(val) -> UInt[N]:
    return UInt[N].process(val)

  def process[T: int](val: UInt[T]) -> UInt[N]:
    if T == N:
      return UInt[N].process_eq(val)
    elif T < N:
      return UInt[N].process_ext(val)
    else:
      return UInt[N].process_trunc(val)
  def process(val: byte) -> UInt[N]:
    if 8 == N:
      return UInt[N].process_eq(val)
    elif 8 < N:
      return UInt[N].process_ext(val)
    else:
      return UInt[N].process_trunc(val)
  def process(val: bool) -> UInt[N]:
    if 8 == N:
      return UInt[N].process_eq(val)
    elif 8 < N:
      return UInt[N].process_ext(val)
    else:
      return UInt[N].process_trunc(val)
  @llvm
  def process_trunc[T: int](val: UInt[T]) -> UInt[N]:
    %0 = trunc i{=T} %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_ext[T: int](val: UInt[T]) -> UInt[N]:
    %0 = zext i{=T} %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_eq[T: int](val: UInt[T]) -> UInt[N]:
    ret i{=N} %val
  @llvm
  def process_trunc(val: byte) -> UInt[N]:
    %0 = trunc i8 %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_ext(val: byte) -> UInt[N]:
    %0 = zext i8 %val to i{=N}
    ret i{=N} %0
  @llvm
  def process_eq(val: byte) -> UInt[N]:
    ret i{=N} %val
  @llvm
  def process_trunc(val: bool) -> UInt[N]:
    %0 = trunc i8 %val to i{=N}
    ret i{=N} %val
  @llvm
  def process_ext(val: bool) -> UInt[N]:
    %0 = zext i8 %val to i{=N}
    ret i{=N} %val
  @llvm
  def process_eq(val: bool) -> UInt[N]:
    ret i8 %val

      
@extend
class byte:

  def __new__(val) -> byte:
    return byte.process(val)

  def process[T: int](val: Int[T]) -> byte:
    if T == 8:
      return byte.process_eq(val)
    elif T < 8:
      return byte.process_ext(val)
    else:
      return byte.process_trunc(val)

  def process[T: int](val: UInt[T]) -> byte:
    if T == 8:
      return byte.process_eq(val)
    elif T < 8:
      return byte.process_ext(val)
    else:
      return byte.process_trunc(val)      
  @llvm
  def process_trunc[T: int](val: Int[T]) -> byte:
    %0 = trunc i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_trunc[T: int](val: UInt[T]) -> byte:
    %0 = trunc i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_ext[T: int](val: Int[T]) -> byte:
    %0 = zext i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_ext[T: int](val: UInt[T]) -> byte:
    %0 = zext i{=T} %val to i8
    ret i8 %0
  @llvm
  def process_eq[T: int](val: Int[T]) -> byte:
    ret i8 %val
  @llvm
  def process_eq[T: int](val: UInt[T]) -> byte:
    ret i8 %val
  @llvm
  def __rshift__(self, other: byte) -> byte:
    %0 = ashr i8 %self, %other
    ret i8 %0
  @llvm
  def __and__(a: byte, b: byte) -> byte:
    %tmp = and i8 %a, %b
    ret i8 %tmp

@extend
class File:
  
  # T = bytes
  def read_u[T: int](self) -> UInt[T*8]:
    self._ensure_open()
    buf = Ptr[byte](T)
    assert _C.fread(buf, 1, T, self.fp) == T
    self._errcheck("error in read")
    return buf.convert_u[T*8]()

  def read_s[T: int](self) -> Int[T*8]:
    self._ensure_open()
    buf = Ptr[byte](T)
    assert _C.fread(buf, 1, T, self.fp) == T
    self._errcheck("error in read")
    return buf.convert_s[T*8]()

  def read_b(self) -> byte:
    self._ensure_open()
    buf = Ptr[byte](1)
    assert _C.fread(buf, 1, 1, self.fp) == 1
    self._errcheck("error in read")    
    return buf[0]

  def read_into[T](self, buf: Ptr[T], sz: int=1, nelems:int=1, offset:int = 0):
    self._ensure_open()
    assert _C.fread((buf+offset).as_byte(), sz, nelems, self.fp) == nelems
    self._errcheck("error in read")          

@extend
class Ptr[T]:
  def resize(self, new_cap: int) -> Ptr[T]:
    return Ptr[T](gc.realloc(self, new_cap * gc.sizeof[T]()))
  @llvm
  def convert_u[N: int](self) -> UInt[N]:
    %0 = bitcast {=T}* %self to i{=N}*
    %1 = load i{=N}, i{=N}* %0 
    ret i{=N} %1  
  @llvm
  def convert_s[N: int](self) -> Int[N]:
    %0 = bitcast {=T}* %self to i{=N}*
    %1 = load i{=N}, i{=N}* %0 
    ret i{=N} %1    

@extend
class float:
  def __new__(i) -> float:
    return float._to_float(i)
  @llvm
  def _to_float[N:int](i: UInt[N]) -> float:
    %0 = uitofp i{=N} %i to double
    ret double %0
  @llvm
  def _to_float[N:int](i: Int[N]) -> float:
    %0 = sitofp i{=N} %i to double
    ret double %0
  @llvm
  def _to_float(i: bool) -> float:
    %0 = sitofp i8 %i to double
    ret double %0

@test
def do_test():
  print 'Running bits.seq tests'
  rbits = RBits[5]()
  rbits.pack(1)
  rbits.pack(0)
  rbits.pack(0)
  rbits.pack(1)
  rbits.pack(1)
  assert rbits == UInt[5](19)
  rbits.pack(0)
  assert rbits == UInt[5](6)
  rbits.clear()
  assert rbits == UInt[5](0)
  
  bits = Bits[16]()
  bits.pack(0x4F, 8)
  assert bits == 0x4F
  bits[1:2] = 1
  assert bits == 0x4F
  bits[-3:-2] = 0
  assert bits == 0x4B
  bits[-3:] = 0x4
  assert bits == 0x4C

  bits2 = Bits[8]()
  bits2.pack(0x4F, 8)
  assert bits2 == 0x4F
  bits2.pack(0xA, 4)
  assert bits2 == 0x4FA
  bits2[0:1] = 1
  assert bits2 == 0xCFA
  bits2[0:4] = 0xA
  assert bits2 == 0xAFA
  bits2[0:8] = 0xAB
  assert bits2 == 0xABA
  bits2[-1:] = 1
  assert bits2 == 0xABB
  bits2.pack(0xF,4)
  assert bits2 == 0xABBF
  bits2[13:] = 4
  assert bits2 == 0xABBC

