from error import *
from slice import *
from multidim import *
from tuple_opts import *
import random,string
import math

# TODO one thing I need to do is better explain the different scenarios for indexing. e.g. don't specify lower bound? it is set to 0.
# don't specify upper bound? set to dim sz, so be careful if you go out-of-bounds

@dataclass(init=False)
class Block[E,T,C]:
  base: Multidim[E,T,C]

@dataclass(init=False)
class View[E,T,C]:
  base: Multidim[E,T,C]

# these make placeholders for figuring out the tuple type
def make_int_tuple(tup):
  if staticlen(tup) == 0:
    return ()
  else:
    return (0,) + make_int_tuple(tup[1:])

def make_cola_slice_tuple(tup):
  if staticlen(tup) == 0:
    return ()
  else:
    return (ColaSlice(0,1,1),) + make_cola_slice_tuple(tup[1:])

@extend
class Block[E,T,C]:

  def make[E](*dims):
    d = tuple(d for d in dims)
    T = typeof(make_int_tuple(d))
    C = typeof(make_cola_slice_tuple(d))
    return Block[E,T,C](*dims)

  # This should really just be used for quick debugging
  def make[E,T](dims: T, elems: list[E]):
    C = typeof(make_cola_slice_tuple(dims))
    return Block[E,T,C](dims, elems)

  def __init__(self, *dims):
    self.base = Multidim[E,T,C](*dims)
     
  def __init__(self, other: Block[E,T,C]):
    self.base = Multidim(other.base, True)

  def __init__(self, other: View[E,T,C]):
    self.base = Multidim(other.base, True)

  def __init__(self, other: Multidim[E,T,C]):
    self.base = other
  
  def shallow_cast[E2](self) -> Block[E2,T,C]:
    """
    Creates a new Block with same dimensions and mappings as self, but with a different element type (E2)
    """
    return Block(self.base.shallow_cast[E2]())

  def dims(self) -> T:
    return self.base.dims()

  def cgrid(self):
    return self.base.cgrid()

  def cgrid_mapping(self):
    return self.base.cgrid_mapping()

  def nunits(self) -> int:
    return self.base.nunits()

  def origin(self) -> T:
    return self.base.origin()

  def remap[E2](self, other: Block[E2,T,C]) -> Block[E,T,C]:
    self.base.remap(other.base)
    return self

  def remap[E2](self, other: View[E2,T,C]) -> Block[E,T,C]:
    self.base.remap(other.base)
    return self

  def is_same_region(self, other: Block[E,T,C]) -> bool:
    return self.base.is_same_region(other.base)

  def is_same_region(self, other: View[E,T,C]) -> bool:
    return self.base.is_same_region(other.base)

  def origin_relative_to[E2](self, other: Block[E2,T,C]) -> T:
    return self.base.origin_relative_to(other.base)

  def origin_relative_to[E2](self, other: View[E2,T,C]) -> T:
    return self.base.origin_relative_to(other.base)

  def fully_contained[E2](self, other: Block[E2,T,C]) -> bool:
    return self.base.fully_contained(other.base)

  def fully_contained[E2](self, other: View[E2,T,C]) -> bool:
    return self.base.fully_contained(other.base)

  def fully_contained(self, other_mapping: C) -> bool:
    return self.base.fully_contained(other_mapping)

  def __call__(self) -> E:
    return self.base.__call__()

  def __call__(self, idx: int, *idxs) -> E:
    return self.base.__call__(idx, *idxs)

  def __setitem__[E2](self, idx: Block[E2,T,C], item: E):
    self.base[idx.base] = item

  def __setitem__[E2](self, idx: View[E2,T,C], item: E):
    self.base[idx.base] = item

  def __setitem__[E2,T2,C2](self, idx: Block[E2,T,C], item: Block[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: Block[E2,T,C], item: View[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: View[E2,T,C], item: Block[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: View[E2,T,C], item: View[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__(self, idxs, item):
    self.base[idxs] = item

  def __setitem__[T2,C2](self, idxs, item: Block[E,T2,C2]):
    self.base[idxs] = item.base

  def __setitem__[T2,C2](self, idxs, item: View[E,T2,C2]):
    self.base[idxs] = item.base

  def __setitem__(self, relative_name: str, relative: Block[E,T,C]):
    self.base[relative_name] = relative.base

  def __setitem__(self, relative_name: str, relative: View[E,T,C]):
    self.base[relative_name] = relative.base

  def __getitem__(self, idxs) -> View[E,T,C]:
    return View(self.base[idxs])

  def __getitem__[E2](self, idx: Block[E2,T,C]) -> View[E,T,C]:
    return View(self.base[idx.base]) 

  def __getitem__[E2](self, idx: View[E2,T,C]) -> View[E,T,C]:
    return View(self.base[idx.base]) 

  def __getitem__(self, relative: str) -> View[E,T,C]:
    return View(self.base[relative])

  def __str__(self) -> str:
    return str(self.base)

  def __eq__(self, val) -> bool:
    return self.base == val

  def __eq__(self, val: Block[E,T,C]) -> bool:
    return self.base == val.base

  def __eq__(self, val: View[E,T,C]) -> bool:
    return self.base == val.base

  def __ne__(self, val) -> bool:
    return not (self == val)

  def to_int(self: Block[int,T,C]) -> Block[int,T,C]:
    return self

  def to_int(self: Block[E,T,C]) -> Block[int,T,C]:
    return Block(self.base.to_int())

  def to_float(self: Block[float,T,C]) -> Block[float,T,C]:
    return self

  def to_float(self: Block[E,T,C]) -> Block[float,T,C]:
    return Block(self.base.to_float())

  def loc_eq(self, other: View[E,T,C]) -> bool:
    return self.base.loc_eq(other.base)

  def loc_eq(self, other: Block[E,T,C]) -> bool:
    return self.base.loc_eq(other.base)

  def buffer_owner(self) -> Block[E,T,C]:
    return Block(self.base._buffer_owner)

  def default_fill(self,add=0):
    self.base.default_fill(add)
    return self

  def read(self, fd, bytes_per_elem: int, nelems: int):
    """
    Read data from self.fp into the raw underlying buffer belonging to buff.
    This starts in buff.base.buffer at the mapping specified by buff, but
    then just writes contiguously, so beware if you have stride or sub-regions.
    """
    self.base.read(fd, bytes_per_elem, nelems)

  def write(self, fd, bytes_per_elem: int, nelems: int):
    """
    Write data from buff into self.fp. 
    This starts in buff.base.buffer at the mapping specified by buff, but
    then just reads contiguously, so beware if you have stride or sub-regions.
    """
    self.base.write(fd, bytes_per_elem, nelems)

@extend
class View[E,T,C]:

  def __init__(self, other: Block[E,T,C]):
    self.base = Multidim(other.base, False)

  def __init__(self, other: View[E,T,C]):
    self.base = Multidim(other.base, False)

  # for internal building
  def __init__(self, other: Multidim[E,T,C]):
    self.base = other

  def shallow_cast[E2](self) -> Block[E2,T,C]:
    """
    Creates a new Block with same dimensions and mappings as self, but with a different element type (E2).
    Doesn't copy over the elements
    """
    return Block(self.base.shallow_cast[E2]())

  def dims(self) -> T:
    return self.base.dims()

  def cgrid_mapping(self):
    return self.base.cgrid_mapping()

  def cgrid(self):
    return self.base.cgrid()

  def nunits(self) -> int:
    return self.base.nunits()

  def origin(self) -> T:
    return self.base.origin()

  def origin_relative_to[E2](self, other: Block[E2,T,C]) -> T:
    return self.base.origin_relative_to(other.base)

  def origin_relative_to[E2](self, other: View[E2,T,C]) -> T:
    return self.base.origin_relative_to(other.base)

  def is_same_region(self, other: Block[E,T,C]) -> bool:
    return self.base.is_same_region(other.base)

  def is_same_region(self, other: View[E,T,C]) -> bool:
    return self.base.is_same_region(other.base)

  def __call__(self) -> E:
    return self.base.__call__()

  def __call__(self, idx: int, *idxs) -> E:
    return self.base.__call__(idx, *idxs)

  def clamp(self, idx: int, *idxs) -> E:
    return self.base.clamp(idx, *idxs)

  def clamp(self) -> E:
    return self.base.clamp()

  def clamp(self, other: Block[E,T,C]) -> View[E,T,C]:
    return View(self.base.clamp(other.base))

  def clamp(self, other: View[E,T,C]) -> View[E,T,C]:
    return View(self.base.clamp(other.base))
  
  def exists(self) -> bool:
    return self.base.fully_contained(self.base._buffer_owner)

  def exists[E2](self, relative_to: Block[E2,T,C]) -> bool:
    return self.base.fully_contained(relative_to.base)

  def exists[E2](self, relative_to: View[E2,T,C]) -> bool:
    return self.base.fully_contained(relative_to.base)
  
  def fully_contained[E2](self, other: Block[E2,T,C]) -> bool:
    return self.base.fully_contained(other.base)

  def fully_contained[E2](self, other: View[E2,T,C]) -> bool:
    return self.base.fully_contained(other.base)

  def fully_contained(self, other_mapping: C) -> bool:
    return self.base.fully_contained(other_mapping)

  def __setitem__[E2](self, idx: Block[E2,T,C], item: E):
    self.base[idx.base] = item

  def __setitem__[E2](self, idx: View[E2,T,C], item: E):
    self.base[idx.base] = item

  def __setitem__[E2,T2,C2](self, idx: Block[E2,T,C], item: Block[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: Block[E2,T,C], item: View[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: View[E2,T,C], item: Block[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__[E2,T2,C2](self, idx: View[E2,T,C], item: View[E,T2,C2]):
    self.base[idx.base] = item.base

  def __setitem__(self, idxs, item):
    self.base[idxs] = item

  def __setitem__[T2,C2](self, idxs, item: Block[E,T2,C2]):
    self.base[idxs] = item.base

  def __setitem__[T2,C2](self, idxs, item: View[E,T2,C2]):
    self.base[idxs] = item.base

  def __setitem__(self, relative_name: str, relative: Block[E,T,C]):
    self.base[relative_name] = relative.base

  def __setitem__(self, relative_name: str, relative: View[E,T,C]):
    self.base[relative_name] = relative.base

  def __getitem__[E2](self, idx: Block[E2,T,C]) -> View[E,T,C]:
    return View(self.base[idx.base]) 

  def __getitem__[E2](self, idx: View[E2,T,C]) -> View[E,T,C]:
    return View(self.base[idx.base]) 

  def __getitem__(self, idxs) -> View[E,T,C]:
    return View(self.base[idxs])

  def __getitem__(self, relative: str) -> View[E,T,C]:
    return View(self.base[relative])

  def __str__(self) -> str:
    return str(self.base)

  def __eq__(self, val) -> bool:
    return self.base == val

  def __eq__(self, val: Block[E,T,C]) -> bool:
    return self.base == val.base

  def __eq__(self, val: View[E,T,C]) -> bool:
    return self.base == val.base

  def __ne__(self, val) -> bool:
    return not (self == val)

  def to_int(self: View[int,T,C]) -> View[int,T,C]:
    return self

  def to_int(self: View[E,T,C]) -> Block[int,T,C]:
    return Block(self.base.to_int())

  def to_float(self: View[float,T,C]) -> View[float,T,C]:
    return self

  def to_float(self: View[E,T,C]) -> Block[float,T,C]:
    return Block(self.base.to_float())

  def loc_eq(self, other: View[E,T,C]) -> bool:
    return self.base.loc_eq(other.base)

  def loc_eq(self, other: Block[E,T,C]) -> bool:
    return self.base.loc_eq(other.base)

  def buffer_owner(self) -> Block[E,T,C]:
    return Block(self.base._buffer_owner)

  def default_fill(self, add=0):
    self.base.default_fill(add)
    return self

  def read(self, fd, bytes_per_elem: int, nelems: int):
    """
    Read data from self.fp into the raw underlying buffer belonging to buff.
    This starts in buff.base.buffer at the mapping specified by buff, but
    then just writes contiguously, so beware if you have stride or sub-regions.
    """
    self.base.read(fd, bytes_per_elem, nelems)

  def write(self, fd, bytes_per_elem: int, nelems: int):
    """
    Write data from buff into self.fp. 
    This starts in buff.base.buffer at the mapping specified by buff, but
    then just reads contiguously, so beware if you have stride or sub-regions.
    """
    self.base.write(fd, bytes_per_elem, nelems)

@extend
class int:
  @llvm
  def __add__(self, other: byte) -> int:
    %0 = zext i8 %other to i64
    %tmp = add i64 %self, %0
    ret i64 %tmp    
  @llvm
  def __sub__(self, other: byte) -> int:
    %0 = zext i8 %other to i64
    %tmp = sub i64 %self, %0
    ret i64 %tmp

@extend
class byte:
  @llvm
  def __add__(self, other: int) -> int:
    %0 = zext i8 %self to i64
    %tmp = add i64 %0, %other
    ret i64 %tmp    
  @llvm
  def __sub__(self, other: int) -> int:
    %0 = zext i8 %self to i64
    %tmp = sub i64 %0, %other
    ret i64 %tmp

@extend 
class int:
  def __new__[E,T,C](what: Block[E,T,C]):
    return what.to_int()
  def __new__[E,T,C](what: View[E,T,C]):
    return what.to_int()

@extend 
class float:
  def __new__[E,T,C](what: Block[E,T,C]):
    return what.to_float()
  def __new__[E,T,C](what: View[E,T,C]):
    return what.to_float()

class BlockOps:

  def floor(obj):
    """
    floor elements of obj (which should be a Block or View)
    """
    obj2 = obj.shallow_cast[float]()
    for n in range(obj.nunits()):
      obj2[n] = math.floor(obj(n))
    return obj2  

  def round(obj,places:int=0):
    """
    floor elements of obj (which should be a Block or View)
    """
    obj2 = obj.shallow_cast[float]()
    for n in range(obj.nunits()):
      obj2[n] = math.round(obj(n), places)
    return obj2  

@extend 
class Multidim[E,T,C]:

  def __add__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) + other(n)
    return res
  def __add__(self, other: E):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) + other
    return res

  def __iadd__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) + other(n)
    return self
  def __iadd__(self, other: E):
    for n in range(self.nunits()):
      self[n] = self(n) + other
    return self

  def __sub__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) - other(n)
    return res
  def __sub__(self, other: E):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) - other
    return res

  def __isub__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) - other(n)
    return self
  def __isub__(self, other: E):
    for n in range(self.nunits()):
      self[n] = self(n) - other
    return self

  def __mul__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) * other(n)
    return res
  def __mul__(self, other: E):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) * other
    return res

  def __imul__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) * other(n)
    return self
  def __imul__(self, other: E):
    for n in range(self.nunits()):
      self[n] = self(n) * other
    return self

  def __mod__(self, other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) % other(n)
    return res
  def __mod__(self, other: int):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) % other
    return res

  def __imod__(self, other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) % other(n)
    return self
  def __imod__(self, other: int):
    for n in range(self.nunits()):
      self[n] = self(n) % other
    return self

  def __floordiv__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[int,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) // other(n)
    return res
  def __floordiv__(self, other: E):
    res = Multidim[int,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) // other
    return res

  def __floordiv__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) // other(n)
    return self
  def __floordiv__(self, other: E):
    for n in range(self.nunits()):
      self[n] = self(n) // other
    return self

  def __truediv__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[float,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) / other(n)
    return res
  def __truediv__(self, other: E):
    res = Multidim[float,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) / other
    return res
  
  def __itruediv__(self, other: Multidim[E,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) / other(n)
    return self
  def __itruediv__(self, other: E):
    for n in range(self.nunits()):
      self[n] = self(n) / other
    return self
  
  # TODO once I can specified self: Multidim[int,T,C], do that
  def __lshift__(self: Multidim[E,T,C], other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) << other(n)
    return res
  def __lshift__(self: Multidim[E,T,C], other: int):
    res = Multidim[int,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) << other
    return res    

  def __ilshift__(self: Multidim[E,T,C], other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) << other(n)
    return self
  def __ilshift__(self: Multidim[E,T,C], other: int):
    for n in range(self.nunits()):
      self[n] = self(n) << other
    return self   

  def __rshift__(self: Multidim[E,T,C], other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    res = Multidim[int,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) >> other(n)
    return res
  def __rshift__(self: Multidim[E,T,C], other: int):
    res = Multidim[int,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = self(n) >> other
    return res    

  def __irshift__(self: Multidim[E,T,C], other: Multidim[int,T,C]):
    if self.dims() != other.dims():
      raise ColaError()
    for n in range(self.nunits()):
      self[n] = self(n) >> other(n)
    return self
  def __irshift__(self: Multidim[E,T,C], other: int):
    for n in range(self.nunits()):
      self[n] = self(n) >> other
    return self   

  def __abs__(self):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = abs(self(n))
    return res

  def __neg__(self):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = -self(n)
    return res

  def __invert__(self):
    res = Multidim[E,T,C](self.dims())
    for n in range(self.nunits()):
      res[n] = ~self(n)
    return res

@extend
class Block[E,T,C]:

  def __add__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base + other.base)
  def __add__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base + other.base)
  def __add__(self, other: E) -> Block[E,T,C]:
    return Block(self.base + other)

  def __iadd__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    self.base += other.base
    return self
  def __iadd__(self, other: View[E,T,C]) -> Block[E,T,C]:
    self.base += other.base
    return self
  def __iadd__(self, other: E) -> Block[E,T,C]:
    self.base += other
    return self

  def __sub__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base - other.base)
  def __sub__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base - other.base)
  def __sub__(self, other: E) -> Block[E,T,C]:
    return Block(self.base - other)

  def __mul__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base * other.base)
  def __mul__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base * other.base)
  def __mul__(self, other: E) -> Block[E,T,C]:
    return Block(self.base * other)

  def __mod__(self, other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base % other.base)
  def __mod__(self, other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base % other.base)
  def __mod__(self, other: int) -> Block[int,T,C]:
    return Block(self.base % other)

  def __floordiv__(self, other: Block[E,T,C]) -> Block[int,T,C]:
    return Block(self.base // other.base)
  def __floordiv__(self, other: View[E,T,C]) -> Block[int,T,C]:
    return Block(self.base // other.base)
  def __floordiv__(self, other: E) -> Block[int,T,C]:
    return Block(self.base // other)

  def __truediv__(self, other: Block[E,T,C]) -> Block[float,T,C]:
    return Block(self.base // other.base)
  def __truediv__(self, other: View[E,T,C]) -> Block[float,T,C]:
    return Block(self.base // other.base)
  def __truediv__(self, other: E) -> Block[float,T,C]:
    return Block(self.base // other)

  def __lshift__(self: Block[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base << other.base)
  def __lshift__(self: Block[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base << other.base)
  def __lshift__(self: Block[E,T,C], other: int) -> Block[int,T,C]:
    return Block(self.base << other)

  def __ilshift__(self: Block[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    self.base <<= other.base
    return self
  def __ilshift__(self: Block[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    self.base <<= other.base
    return self
  def __ilshift__(self: Block[E,T,C], other: int) -> Block[int,T,C]:
    self.base <<= other
    return self

  def __rshift__(self: Block[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base >> other.base)
  def __rshift__(self: Block[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base >> other.base)
  def __rshift__(self: Block[E,T,C], other: int) -> Block[int,T,C]:
    return Block(self.base >> other)

  def __irshift__(self: Block[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    self.base >>= other.base
    return self
  def __irshift__(self: Block[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    self.base >>= other.base
    return self
  def __irshift__(self: Block[E,T,C], other: int) -> Block[int,T,C]:
    self.base >>= other
    return self

  def __abs__(self) -> Block[E,T,C]:
    return Block(abs(self.base))

  def __neg__(self) -> Block[E,T,C]:
    return Block(self.base.__neg__())

  def __invert__(self) -> Block[E,T,C]:
    return Block(~self.base)

@extend
class View[E,T,C]:

  def __add__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base + other.base)
  def __add__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base + other.base)
  def __add__(self, other: E) -> Block[E,T,C]:
    return Block(self.base + other)

  def __sub__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base - other.base)
  def __sub__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base - other.base)
  def __sub__(self, other: E) -> Block[E,T,C]:
    return Block(self.base - other)

  def __mul__(self, other: Block[E,T,C]) -> Block[E,T,C]:
    return Block(self.base * other.base)
  def __mul__(self, other: View[E,T,C]) -> Block[E,T,C]:
    return Block(self.base * other.base)
  def __mul__(self, other: E) -> Block[E,T,C]:
    return Block(self.base * other)

  def __mod__(self, other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base % other.base)
  def __mod__(self, other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base % other.base)
  def __mod__(self, other: int) -> Block[int,T,C]:
    return Block(self.base % other)

  def __floordiv__(self, other: Block[E,T,C]) -> Block[int,T,C]:
    return Block(self.base // other.base)
  def __floordiv__(self, other: View[E,T,C]) -> Block[int,T,C]:
    return Block(self.base // other.base)
  def __floordiv__(self, other: E) -> Block[int,T,C]:
    return Block(self.base // other)

  def __truediv__(self, other: Block[E,T,C]) -> Block[float,T,C]:
    return Block(self.base // other.base)
  def __truediv__(self, other: View[E,T,C]) -> Block[float,T,C]:
    return Block(self.base // other.base)
  def __truediv__(self, other: E) -> Block[float,T,C]:
    return Block(self.base // other)

  def __lshift__(self: View[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base << other.base)
  def __lshift__(self: View[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base << other.base)
  def __lshift__(self: View[E,T,C], other: int) -> Block[int,T,C]:
    return Block(self.base << other)

  def __ilshift__(self: View[E,T,C], other: Block[int,T,C]) -> View[int,T,C]:
    self.base <<= other.base
    return self
  def __ilshift__(self: View[E,T,C], other: View[int,T,C]) -> View[int,T,C]:
    self.base <<= other.base
    return self
  def __ilshift__(self: View[E,T,C], other: int) -> View[int,T,C]:
    self.base <<= other
    return self

  def __rshift__(self: View[E,T,C], other: Block[int,T,C]) -> Block[int,T,C]:
    return Block(self.base >> other.base)
  def __rshift__(self: View[E,T,C], other: View[int,T,C]) -> Block[int,T,C]:
    return Block(self.base >> other.base)
  def __rshift__(self: View[E,T,C], other: int) -> Block[int,T,C]:
    return Block(self.base >> other)

  def __irshift__(self: View[E,T,C], other: Block[int,T,C]) -> View[int,T,C]:
    self.base >>= other.base
    return self
  def __irshift__(self: View[E,T,C], other: View[int,T,C]) -> View[int,T,C]:
    self.base >>= other.base
    return self
  def __irshift__(self: View[E,T,C], other: int) -> View[int,T,C]:
    self.base >>= other
    return self

  def __abs__(self) -> Block[E,T,C]:
    return Block(abs(self.base))

  def __neg__(self) -> Block[E,T,C]:
    return Block(self.base.__neg__())

  def __invert__(self) -> Block[E,T,C]:
    return Block(~self.base)

### Some useful extensions

@extend
class Array[T]:

  def __str__(self) -> str:
    return '[' + ','.join([str(self[i]) for i in range(self.len)]) + ']'

  def __iter__(self):
    for i in range(self.len):
      yield self[i]
    
  def __eq__(self, other: Array[T]):
    if len(self) != len(other):
      return False
    for i in range(len(self)):
      if self[i] != other[i]:
        return False
    return True

  def __ne__(self, other: Array[T]):
    return not (self == other)

  def __eq__(self, other: list[T]):
    if len(self) != len(other):
      return False
    for i in range(len(self)):
      if self[i] != other[i]:
        return False
    return True

  def __ne__(self, other: list[T]):
    return not (self == other)

  def __match__(self, other: Array[T]) -> bool:
    return self == other

  def __match__(self, other: list[T]) -> bool:
    if len(self) != len(other):
      return False
    for s,o in zip(self, other):
      if s != 0:
        return False
    return True  

@extend
class list[T]:
  def __match__(self, other: list[T]) -> bool:
    return self == other

  def __match__(self, other: Array[T]) -> bool:
    return other.__match__(self)

def do_test():
  print 'Running block.seq tests'
  blk = Block.make[int](4,5).default_fill(1)
  @test
  def t0():
    assert blk.base._buffer == [r+1 for r in range(20)]
  t0()
  @test
  def t1():
    assert blk[2,3] == 14
    assert blk(2,3) == 14
    assert blk[13] == 14
    assert blk(13) == 14
  t1()
  blk2 = Block(blk[1::2,1:])
  for i in range(blk2.nunits()):    
    blk2[i] = i*10
  @test
  def t2():
    assert blk2.base._buffer == [r*10 for r in range(blk2.nunits())]
    assert blk2.dims() == (2,4)
    assert blk2.origin() == (1,1)
    assert blk2.origin_relative_to(blk) == (1,1)
  t2()
  view = blk2[:,::3]
  @test
  def t3():
    assert view == [0, 30, 40, 70]
    assert view.dims() == (2,2)
    assert view.origin() == (1,1)
    assert view.origin_relative_to(blk) == (1,1)
    assert view.origin_relative_to(blk2) == (0,0)
  t3()
  view[1,0] = 41
  @test
  def t4():
    assert view[1,0] == [41]
  t4()
  view2 = blk2[1:,1::2]
  @test
  def t5():
    assert view2 == [50, 70]
  t5()
  view3 = blk2[1:,1:]
  @test
  def t6():
    assert view3 == [50, 60, 70]
    assert view3[:,-1:] == [41, 50, 60, 70]
  t6()
  ref4x4 = Block.make[int](4,4).default_fill(0)
  est4x4 = Block.make[int](4,4).default_fill(1)
  @test
  def t7():
    diff = ref4x4-est4x4
    assert diff == [-1] * 16
  t7()
  @test
  def t8():
    ablk = Block.make[int](4,8).default_fill()
    view = ablk[:,1:7:2]
    assert view.clamp(-1,-1) == 0
    assert view.clamp(10,20) == 31
    view2 = view[-1:10,-13:3]
    assert view2.clamp(view) == view
    assert view2.clamp(ablk) == ablk[:,:6:2]
  t8()
  @test
  def t9():
    blk = Block.make[int](20).default_fill()
    view = blk[1:11:3]
    assert view == [1,4,7,10]
    view2 = blk[4::6]
    assert view2 == [4,10,16]
    view3 = view[view2]
    assert view3 == [4,10,16]
    view4 = view3.clamp(view)
    assert view4 == [4,10]
  t9()
  @test
  def t10():
    blk = Block.make[int](16,16).default_fill()
    sblk = blk[12:,12:]
    sblk['macroblock'] = blk
    assert sblk['macroblock'] == blk
  t10()
    
